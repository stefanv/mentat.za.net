<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.65.3">Hugo</generator><title type="html"><![CDATA[Stéfan's blog]]></title>
    
    
    
            <link href="https://mentat.za.net/blog/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://mentat.za.net/blog/atom.xml" rel="self" type="application/atom" title="atom" />
    <updated>2020-05-21T10:57:56-07:00</updated>
    
    
    
    
        <id>https://mentat.za.net/blog/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Voice capture org-mode tasks on Android]]></title>
            <link href="https://mentat.za.net/blog/2020/04/28/voice-capture-org-tasks-on-android/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://mentat.za.net/blog/2018/10/31/using-org-mode-with-neomutt/?utm_source=atom_feed" rel="related" type="text/html" title="Linking to emails in org-mode (using neomutt)" />
                <link href="https://mentat.za.net/blog/2016/12/15/org-mode-header-search/?utm_source=atom_feed" rel="related" type="text/html" title="Search headers in org-mode" />
            
                <id>https://mentat.za.net/blog/2020/04/28/voice-capture-org-tasks-on-android/</id>
            
            
            <published>2020-04-28T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Where I show how to hook up org-mode and Google Assistant</blockquote><p>I often want to capture tasks on the go—in a hurry. When there&rsquo;s no time to fire up <a href="https://organice.200ok.ch/">organice</a> or <a href="http://www.orgzly.com/">Orgzly</a>, being able to transcribe tasks comes in really handy.</p>
<p>In this post, I show how, on Android phones, you can hook up Google&rsquo;s Assistant with org-mode, so that you can <em>speak</em> notes and have them appear as TODO items in a buffer.</p>
<h2 id="set-up-google-assistant">Set up Google Assistant</h2>
<p>First, we need to teach Google Assistant a new keyword, and tell it to store transcribed notes in an accessible location.  We do this via the free <a href="https://ifttt.com/">If This Then That</a> service.  Add the &ldquo;Log notes in a Google Drive spreadsheet&rdquo; applet, and configure it as follows:</p>
<ul>
<li><em>What do you want to say?</em> <code>Add a task to $</code></li>
<li><em>What&rsquo;s another way to say it? (optional)</em> <code>new task $</code></li>
<li><em>And another way? (optional)</em> <code>task $</code></li>
<li><em>Drive folder path (optional)</em> <code>Google Assistant</code></li>
</ul>
<p>This would allow you to say <code>task &lt;description&gt;</code> and have Google Assistant log that to a spreadsheet in the <code>Google Assistant</code> folder of your drive.</p>
<p>Save the applet and try it out: launch Google Assistant and say &ldquo;task test out capture system&rdquo;.  Then, locate and open the new spreadsheet in your Google drive.  The URL should be of the form:</p>
<pre><code>https://docs.google.com/spreadsheets/d/8B...ZFk/edit#gid=0
</code></pre><p>Note down that long string after <code>/d/</code>—this is your spreadsheet ID.</p>
<h2 id="set-up-org-mode-conversion">Set up org-mode conversion</h2>
<p>Go to <code>Tools -&gt; Script Editor</code>, and include the script provided at
<a href="https://github.com/stefanv/org-assistant">https://github.com/stefanv/org-assistant</a>.</p>
<p>You have to customize two variables: the spreadsheet ID, and a random &ldquo;token&rdquo; (a password to make it harder for other to abuse the service).</p>
<p>Now, <a href="https://developers.google.com/apps-script/guides/web#deploying_a_script_as_a_web_app">publish the script to the web</a>: <code>Publish -&gt; Deploy as web app...</code>.  Set <code>Who has access to the app</code> to <code>Anyone, even anonymous</code> and note down the published URL.</p>
<h2 id="use-it">Use it!</h2>
<p>I have the following script that downloads TODOs and append them to an org-file:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#007020">#!/bin/bash
</span><span style="color:#007020"></span>
<span style="color:#bb60d5">ASSISTANT_TO_ORG_URL</span><span style="color:#666">=</span><span style="color:#4070a0">&#34;url-to-the-web-app&#34;</span>
<span style="color:#bb60d5">ORG_INBOX</span><span style="color:#666">=</span><span style="color:#4070a0">&#34;</span><span style="color:#70a0d0;font-style:italic">${</span><span style="color:#bb60d5">HOME</span><span style="color:#70a0d0;font-style:italic">}</span><span style="color:#4070a0">/org/assistant-inbox.org&#34;</span>
<span style="color:#bb60d5">TOKEN</span><span style="color:#666">=</span><span style="color:#4070a0">&#39;token-value&#39;</span>

curl -s -S -L -d <span style="color:#4070a0">&#34;</span><span style="color:#bb60d5">$TOKEN</span><span style="color:#4070a0">&#34;</span> <span style="color:#4070a0">&#34;</span><span style="color:#bb60d5">$ASSISTANT_TO_ORG_URL</span><span style="color:#4070a0">?clear=1&#34;</span> &gt;&gt; <span style="color:#bb60d5">$ORG_INBOX</span>
</code></pre></div><p>I then have the following in my daily org checklist:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-org" data-lang="org">[[<span style="color:#4070a0">shell:~/scripts/assistant-tasks.sh</span>][<span style="color:#062873;font-weight:bold">fetch tasks</span>]] : [[<span style="color:#4070a0">file:~/org/assistant-inbox.org</span>][<span style="color:#062873;font-weight:bold">tasks</span>]]
</code></pre></div><p>The first link launches the script that fetches the latest tasks, and the second opens the tasks file.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Having a quick, hands-free way to capture tasks has been tremendously helpful to me.  I hope you find it useful too!</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/org-mode" term="org-mode" label="org-mode" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/productivity" term="productivity" label="productivity" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Scientific Python at Microscopy & MicroAnalysis 2019]]></title>
            <link href="https://mentat.za.net/blog/2019/08/06/portland-microscopy/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://mentat.za.net/blog/2012/09/30/scikits-image-0-dot-7/?utm_source=atom_feed" rel="related" type="text/html" title="scikits-image 0.7" />
                <link href="https://mentat.za.net/blog/2013/06/27/scipy2013-proceedings/?utm_source=atom_feed" rel="related" type="text/html" title="SciPy2013 Proceedings" />
                <link href="https://mentat.za.net/blog/2012/09/25/emacs-package-management/?utm_source=atom_feed" rel="related" type="text/html" title="Emacs package management" />
                <link href="https://mentat.za.net/blog/2018/10/31/using-org-mode-with-neomutt/?utm_source=atom_feed" rel="related" type="text/html" title="Linking to emails in org-mode (using neomutt)" />
                <link href="https://mentat.za.net/blog/2016/10/20/websockets-in-python/?utm_source=atom_feed" rel="related" type="text/html" title="WebSockets in Python (and some Redux)" />
            
                <id>https://mentat.za.net/blog/2019/08/06/portland-microscopy/</id>
            
            
            <published>2019-08-06T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Where we demonstrate a new way of doing interactive image analysis.</blockquote><p>Today, I presented a talk titled <a href="https://doi.org/10.1017/S1431927619001399">&ldquo;Scientific Python: A Mature Computational Ecosystem for Microscopy&rdquo;</a> [<a href="http://www.jhmartins.com/mm2019c/7337/0132.pdf">PDF</a>] at the Microscopy and MicroAnalysis conference in Portland.</p>
<p>A few members of the audience familiar with scientific Python told me they had learned something, so I&rsquo;ll highlight the few topics that I think may have qualified.</p>
<h2 id="scipy-10-paper">SciPy 1.0 paper</h2>
<p>The first official release of SciPy was in 2001, and a mere 16 years later we reached 1.0. This says a lot about the developer community, and how careful they are to label their own work as &ldquo;mature&rdquo;!  To celebrate this project milestone, we <a href="https://arxiv.org/abs/1907.10121">published a preprint on arXiv</a> that outlines the project history and its current status.  It mentions, among other achievements, that SciPy was instrumental in the first <a href="https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.119.161101">gravitational wave detection</a>, as well as the recent <a href="https://iopscience.iop.org/journal/2041-8205/page/Focus_on_EHT">imaging of the black hole in Messier 87</a>.</p>
<h2 id="numpy-__array_function__-protocol">NumPy <code>__array_function__</code> protocol</h2>
<p>The 1.17 release of NumPy (2019-07-26) has support for a <a href="https://numpy.org/neps/nep-0018-array-function-protocol.html">new array function protocol</a>, that allows external libraries to pass their array-like objects through NumPy without them being horribly mangled.  E.g., you may call NumPy&rsquo;s <code>sum</code> on a CuPy array: the computation will happen on the GPU, and the resulting array will still be a CuPy array.</p>
<p>Here is an example:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#40a070">24</span>]: <span style="color:#007020;font-weight:bold">import</span> <span style="color:#0e84b5;font-weight:bold">cupy</span> <span style="color:#007020;font-weight:bold">as</span> <span style="color:#0e84b5;font-weight:bold">cp</span>

In [<span style="color:#40a070">25</span>]: x <span style="color:#666">=</span> cp<span style="color:#666">.</span>random<span style="color:#666">.</span>random([<span style="color:#40a070">10</span>, <span style="color:#40a070">10</span>])

In [<span style="color:#40a070">26</span>]: y <span style="color:#666">=</span> x<span style="color:#666">.</span>sum(axis<span style="color:#666">=</span><span style="color:#40a070">0</span>)

In [<span style="color:#40a070">27</span>]: <span style="color:#007020">type</span>(y), y<span style="color:#666">.</span>shape
Out[<span style="color:#40a070">27</span>]: (cupy<span style="color:#666">.</span>core<span style="color:#666">.</span>core<span style="color:#666">.</span>ndarray, (<span style="color:#40a070">10</span>,))

In [<span style="color:#40a070">28</span>]: <span style="color:#007020;font-weight:bold">import</span> <span style="color:#0e84b5;font-weight:bold">numpy</span> <span style="color:#007020;font-weight:bold">as</span> <span style="color:#0e84b5;font-weight:bold">np</span>

In [<span style="color:#40a070">29</span>]: z <span style="color:#666">=</span> np<span style="color:#666">.</span>sum(x, axis<span style="color:#666">=</span><span style="color:#40a070">0</span>)

In [<span style="color:#40a070">30</span>]: <span style="color:#007020">type</span>(z), z<span style="color:#666">.</span>shape
Out[<span style="color:#40a070">30</span>]: (cupy<span style="color:#666">.</span>core<span style="color:#666">.</span>core<span style="color:#666">.</span>ndarray, (<span style="color:#40a070">10</span>,))
</code></pre></div><p>Note how the result is the same, whether you use CuPy or NumPy&rsquo;s <code>sum</code>.</p>
<p>Whereas NumPy used to be the reference implementation for array computation in Python, it is fast evolving into a standard API, implemented by multiple libraries.</p>
<h2 id="pytorch-and-tensorflow-easily-consume-python-images">PyTorch and TensorFlow easily consume Python images</h2>
<p>Images in scientific Python (<code>scikit-image</code>, <code>opencv</code>, etc.) are represented as NumPy arrays.  It is trivial to pass these arrays into deep learning libraries such as TensorFlow:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#007020;font-weight:bold">from</span> <span style="color:#0e84b5;font-weight:bold">tensorflow.keras.applications.inception_v3</span> <span style="color:#007020;font-weight:bold">import</span> (
    InceptionV3, preprocess_input, decode_predictions
)
<span style="color:#007020;font-weight:bold">from</span> <span style="color:#0e84b5;font-weight:bold">skimage</span> <span style="color:#007020;font-weight:bold">import</span> transform

net <span style="color:#666">=</span> InceptionV3()

<span style="color:#007020;font-weight:bold">def</span> <span style="color:#06287e">inception_predict</span>(image):
    <span style="color:#60a0b0;font-style:italic"># Rescale image to 299x299, as required by InceptionV3</span>
    image_prep <span style="color:#666">=</span> transform<span style="color:#666">.</span>resize(image, (<span style="color:#40a070">299</span>, <span style="color:#40a070">299</span>, <span style="color:#40a070">3</span>), mode<span style="color:#666">=</span><span style="color:#4070a0">&#39;reflect&#39;</span>)
    
    <span style="color:#60a0b0;font-style:italic"># Scale image values to [-1, 1], as required by InceptionV3</span>
    image_prep <span style="color:#666">=</span> (img_as_float(image_prep) <span style="color:#666">-</span> <span style="color:#40a070">0.5</span>) <span style="color:#666">*</span> <span style="color:#40a070">2</span>
    
    predictions <span style="color:#666">=</span> decode_predictions(
        net<span style="color:#666">.</span>predict(image_prep[None, <span style="color:#666">...</span>])
    )
    
    plt<span style="color:#666">.</span>imshow(image, cmap<span style="color:#666">=</span><span style="color:#4070a0">&#39;gray&#39;</span>)
    
    <span style="color:#007020;font-weight:bold">for</span> pred <span style="color:#007020;font-weight:bold">in</span> predictions[<span style="color:#40a070">0</span>]:
        (n, klass, prob) <span style="color:#666">=</span> pred
        <span style="color:#007020;font-weight:bold">print</span>(f<span style="color:#4070a0">&#39;{klass:&gt;15} ({prob:.3f})&#39;</span>)
</code></pre></div>







<figure>
    <img
        
            sizes="(min-width: 35em) 1200px, 100vw"
              
            srcset='
            
                   
            
                   
            
                   
            
                   
            '

            
            
            src="https://mentat.za.net/blog/2019/08/06/portland-microscopy/chelsea.png"
            

        /> <figcaption>
            <h4>Chelsea the Cat</h4>
        </figcaption>
</figure>

<p>For example, when running <code>inception_predict</code> on <code>skimage.data.chelsea()</code>, I get:</p>
<pre><code>Egyptian_cat (0.904)
       tabby (0.054)
   tiger_cat (0.035)
        lynx (0.000)
 plastic_bag (0.000)
</code></pre><p>Looks about right!</p>
<h2 id="imglyb">imglyb</h2>
<p>Philipp Hanslovsky, at SciPy2019, <a href="https://www.youtube.com/watch?v=Ddo5z5qGMb8">demonstrated his Python ↔ Java bridge</a> called <code>imglyb</code>.  In contrast to many previous efforts, this library allows you to <em>share memory</em> between Python and Java, avoiding costly (and, potentially fatal, dependent on memory constraints) reallocations.  E.g., he showed how to manipulate volumes of data (3-D arrays) in Python, and to then view those using ImageJ&rsquo;s impressive <a href="https://imagej.net/BigDataViewer">BigDataViewer</a>, which can rapidly slice through the volume at an arbitrary plane.</p>
<h2 id="lazy-viewing-of-data-using-dask">Lazy viewing of data using <code>dask</code></h2>
<p>This is a trick I borrowed from <a href="http://matthewrocklin.com/blog/work/2017/01/17/dask-images">Matt Rocklin&rsquo;s blog post</a>.</p>
<p>When you have a number of large images that, together, form a stack (3-D volume), it may not be possible to load the entire stack into memory.  Instead, you can use <code>dask</code> to lazily access parts of the volume on an as-needed basis.</p>
<p>This is achieved in four steps:</p>
<ol>
<li>
<p>Convert <code>skimage.io.imread</code> into a delayed function, i.e. instead of returning the image itself it returns a <code>dask</code> <code>Delayed</code> object (similar to a Future or a Promise), that can fetch the image when needed.</p>
</li>
<li>
<p>Use this function to load all images.  The operation is instantaneous, returning a list of <code>Delayed</code> objects.</p>
</li>
<li>
<p>Convert each <code>Delayed</code> object to a <code>dask</code> <code>Array</code>.</p>
</li>
<li>
<p>Stack all of these <code>dask</code> <code>Array</code>s to form the volume.</p>
</li>
</ol>
<p>Note that <em>each one</em> of these steps should execute almost instantaneously; no images files are accessed on disk: that only happens once we start operating on the <code>dask</code> <code>Array</code> volume.</p>
<p>Here is the code:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#007020;font-weight:bold">from</span> <span style="color:#0e84b5;font-weight:bold">glob</span> <span style="color:#007020;font-weight:bold">import</span> glob

<span style="color:#007020;font-weight:bold">from</span> <span style="color:#0e84b5;font-weight:bold">dask</span> <span style="color:#007020;font-weight:bold">import</span> delayed
<span style="color:#007020;font-weight:bold">import</span> <span style="color:#0e84b5;font-weight:bold">dask.array</span> <span style="color:#007020;font-weight:bold">as</span> <span style="color:#0e84b5;font-weight:bold">da</span>

<span style="color:#007020;font-weight:bold">from</span> <span style="color:#0e84b5;font-weight:bold">skimage</span> <span style="color:#007020;font-weight:bold">import</span> io

<span style="color:#60a0b0;font-style:italic"># Read one image to get dimensions</span>
image <span style="color:#666">=</span> io<span style="color:#666">.</span>imread(<span style="color:#4070a0">&#39;samples/Test_TIRR_0_1p5_B0p2_01000.tiff&#39;</span>)

<span style="color:#60a0b0;font-style:italic"># Turn imread into a delayed function, so that it does not immediately</span>
<span style="color:#60a0b0;font-style:italic"># load an image file from disk</span>
imread <span style="color:#666">=</span> delayed(io<span style="color:#666">.</span>imread, pure<span style="color:#666">=</span>True)

<span style="color:#60a0b0;font-style:italic"># Create a list of all our samples; since a delayed version of `imread`</span>
<span style="color:#60a0b0;font-style:italic"># is used, no work is done immediately</span>
samples <span style="color:#666">=</span> [imread(f) <span style="color:#007020;font-weight:bold">for</span> f <span style="color:#007020;font-weight:bold">in</span> <span style="color:#007020">sorted</span>(glob(<span style="color:#4070a0">&#39;samples/*.tiff&#39;</span>))]

<span style="color:#60a0b0;font-style:italic"># Convert each &#34;delayed&#34; object in the list above into a dask array</span>
sample_arrays <span style="color:#666">=</span> [da<span style="color:#666">.</span>from_delayed(sample, shape<span style="color:#666">=</span>image<span style="color:#666">.</span>shape, dtype<span style="color:#666">=</span>np<span style="color:#666">.</span>uint8) <span style="color:#007020;font-weight:bold">for</span> sample <span style="color:#007020;font-weight:bold">in</span> samples]

<span style="color:#60a0b0;font-style:italic"># Stack all these arrays into a volume</span>
vol <span style="color:#666">=</span> da<span style="color:#666">.</span>stack(sample_arrays)
</code></pre></div><p>I have 101 slices of 2048x2048 each, so the resulting <code>dask</code> <code>Array</code> volume (at this stage fully virtual, without any data inside) is:</p>








<figure>
    <img
        
            sizes="(min-width: 35em) 1200px, 100vw"
              
            srcset='
            
                   https://mentat.za.net/blog/2019/08/06/portland-microscopy/dask-array-stack_hudcf8b4878943ce1b5f89d904b26d6a44_26566_480x0_resize_box_2.png 480w,
            
                   https://mentat.za.net/blog/2019/08/06/portland-microscopy/dask-array-stack_hudcf8b4878943ce1b5f89d904b26d6a44_26566_800x0_resize_box_2.png 800w,
            
                   
            
                   
            '

            
            
            src="https://mentat.za.net/blog/2019/08/06/portland-microscopy/dask-array-stack_hudcf8b4878943ce1b5f89d904b26d6a44_26566_800x0_resize_box_2.png"
            

         height="200"/> 
</figure>

<p>We can do numerous operations on this array, such as summing it with <code>vol.sum(axis=0)</code>, although this still yields an uncomputed <code>dask</code> <code>Array</code>.  To get actual values, we need to call:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">vol<span style="color:#666">.</span>sum(axis<span style="color:#666">=</span><span style="color:#40a070">0</span>)<span style="color:#666">.</span>compute()
</code></pre></div><h2 id="napari">Napari</h2>
<p>To visualize a volume like the one above, I could have sliced into it and displayed the result using <code>matplotlib</code>.  However, I used this opportunity to play around with a brand new open source image viewer called <a href="https://github.com/napari/napari">Napari</a>.</p>
<p>Napari allows you to visualize layers interactively, similarly to GIMP or Photoshop.  In Napari&rsquo;s case, these layers can be images, labels, points, and a few others.</p>
<p>While this isn&rsquo;t explicitly documented (Napari is still in <a href="https://github.com/napari/napari/issues/467">alpha</a>!), I had some insider knowledge (👋 J!) that Napari supports both <code>dask</code> and <a href="https://zarr.readthedocs.io">Zarr</a> arrays.  So, we can pass in our volume from the example above as follows:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#007020;font-weight:bold">import</span> <span style="color:#0e84b5;font-weight:bold">napari</span>

<span style="color:#007020;font-weight:bold">with</span> napari<span style="color:#666">.</span>gui_qt():
    viewer <span style="color:#666">=</span> napari<span style="color:#666">.</span>view(vol, clim_range<span style="color:#666">=</span>(<span style="color:#40a070">0</span>, <span style="color:#40a070">255</span>))
</code></pre></div><p>(Instead of the context manager, you may also use <code>%gui = qt</code> in Jupyter or IPython.)</p>
<p>I also happened to have ground truth labels available, so I loaded those up the same way I did the volume, and added it to the visualization:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">viewer<span style="color:#666">.</span>add_labels(labels, name<span style="color:#666">=</span><span style="color:#4070a0">&#39;Labels&#39;</span>)
</code></pre></div>







<figure>
    <img
        
            sizes="(min-width: 35em) 1200px, 100vw"
              
            srcset='
            
                   https://mentat.za.net/blog/2019/08/06/portland-microscopy/napari-ct-volume_hu1f49f705645b1d6504d5c2bd42dc12b3_109127_480x0_resize_q75_box.jpg 480w,
            
                   https://mentat.za.net/blog/2019/08/06/portland-microscopy/napari-ct-volume_hu1f49f705645b1d6504d5c2bd42dc12b3_109127_800x0_resize_q75_box.jpg 800w,
            
                   https://mentat.za.net/blog/2019/08/06/portland-microscopy/napari-ct-volume_hu1f49f705645b1d6504d5c2bd42dc12b3_109127_1200x0_resize_q75_box.jpg 1200w,
            
                   
            '

            
            
            src="https://mentat.za.net/blog/2019/08/06/portland-microscopy/napari-ct-volume_hu1f49f705645b1d6504d5c2bd42dc12b3_109127_800x0_resize_q75_box.jpg"
            

        /> 
</figure>

<p>If you&rsquo;d like to play with Napari yourself, I have a <a href="https://gist.github.com/stefanv/7c296c26b0c3624746f4317bed6a3540">3D cell segmentation example available online</a>.</p>
<h2 id="community">Community</h2>
<p>Toward the conclusion of my talk, I emphasized the role of community in building healthy scientific software ecosystems.  In the end, it is <em>all about people</em>.  I briefly highlight two community groups:</p>
<ul>
<li>
<p><a href="https://pangeo.io/">PanGeo</a>, whom I think sets a great example of how to organize field-specific interest around existing open source tools, and building scalable online analysis platforms without reinventing the wheel.</p>
</li>
<li>
<p><a href="https://www.openmicroscopy.org/">OME</a>, the Open Microscopy Environment, who is leading the charge on open data exchange formats for microscopy.  Interestingly, it <a href="https://blog.openmicroscopy.org/community/file-formats/2019/06/25/formats/">looks like</a> <a href="https://zarr.readthedocs.io">Zarr</a>—the chunked, compressed array container—may well be part of the next open standard they recommend.</p>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Thank you to the organizers of M&amp;M 2019 for inviting me to speak; I very much enjoyed our session, and look forward to working with this community on making scientific Python an <em>even better</em> platform for mirocroscopy analysis!</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/python" term="python" label="python" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/scipy" term="scipy" label="scipy" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/visualization" term="visualization" label="visualization" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/image-processing" term="image-processing" label="image processing" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Designing for Intelligent Augmentation]]></title>
            <link href="https://mentat.za.net/blog/2019/07/05/intelligent-augmentation/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://mentat.za.net/blog/2019/07/05/intelligent-augmentation/</id>
            
            
            <published>2019-07-05T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>How can we better design systems that combine computational inference and human intelligence?</blockquote><p>The first issue of the <a href="https://hdsr.mitpress.mit.edu/">Harvard Data Science Review</a> was published last month.  I enjoyed <a href="https://hdsr.mitpress.mit.edu/pub/wot7mkc1">Michael Jordan&rsquo;s opinion piece</a>, in which he considers progress made (and, yes, hype!) in so-called artificial intelligence.  Particularly, I was excited about the phrase &ldquo;Intelligent Augmentation&rdquo;—the pursuit of systems that enhances our ability to reason about a subject, by providing additional analysis, data, and emphasis. Jordan writes:</p>
<blockquote>
<p>IA will also remain quite essential, because for the foreseeable future, computers will not be able to match humans in their ability to reason abstractly about real-world situations. We will need well-thought-out interactions of humans and computers to solve our most pressing problems. And we will want computers to trigger new levels of human creativity, not replace human creativity (whatever that might mean).</p>
</blockquote>
<p>A week ago, I attended a family event where I got pulled into a surprisingly animated argument around Google Maps: is it accurate, is it helpful, and what are we losing by relying on it. The argument took all the predictable turns (yes, kids nowadays cannot use maps any more, and if Google decided to summon us all to the Mountainview HQ as an April Fool&rsquo;s joke, the results would be comically sad). But an interesting outcome was the question: &ldquo;How can we better design systems to <em>help humans</em> make good decisions?&rdquo;</p>
<p><img src="https://i.ytimg.com/vi/fmnTfkFN3KE/hqdefault.jpg" alt="Lemmings walking off a cliff, which they do—but to migrate, not commit suicide"></p>
<p>E.g., Google Maps tells you where to drive—they maybe even give you one or two route options.  But the overarching goal is to get you to your destination in the shortest amount of time.  What if you felt like taking a scenic drive, or wanted to explore a bit?  In that case, a map that showed a compass and traffic for all nearby roads would be much more helpful. How many times do we drive past a national monument such as <a href="http://www.parks.ca.gov/?page_id=509">Bodie</a>, or a street festival on the next block over without realizing it? Maps could certainly alert us to these.</p>
<p>At the Berkeley Institute for Data Science, I build a lot of open source research software. I&rsquo;ve learned that systems that work <em>with</em> humans are often both simpler to develop and ultimately more effective than fully automated systems. When we wrote <a href="https://naturalhistorymuseum.github.io/inselect/">Inselect</a> with the Natural History Museum, it would have been very hard to do a 100% accurate segmentation of insect speciments (especially since many of the photos this would be applied to contained insects unseen during training).  But if you can provide reasonable accuracy, humans can easily adjust for minor discrepancies and still save a lot of time.</p>
<p>With this blog post, I encourage software designers to:</p>
<blockquote>
<p>Think about how to best empower your users, rather than to prescribe their behavior implicitly through design decisions.  Be mindful that users may have experience to contribute and a desire to execute their own plan; <strong>augment</strong> their ability to do so effectively.</p>
</blockquote>
<p>Circling back to Jordan&rsquo;s article, I encourage you to read the various commentaries (for now, the easiest way to find them is to scroll down to the article on the <a href="https://hdsr.mitpress.mit.edu/">journal front-page</a>).  I enjoyed, e.g., <a href="https://hdsr.mitpress.mit.edu/pub/rim3pvdw">David Donoho&rsquo;s</a>, where he discusses the requirements for &ldquo;true intelligence&rdquo; in AI, although I think he may have misinterpreted Jordan&rsquo;s intent with the term &ldquo;augmented intelligence&rdquo;.</p>
<p>I&rsquo;ll end with a quote from Greg Cane&rsquo;s <a href="https://hdsr.mitpress.mit.edu/pub/kyzf7fjv">commentary</a>:</p>
<blockquote>
<p>For the humanist, intelligence augmentation must now and forever be our goal. Machine learning only matters insofar as it makes us fundamentally more intelligent and deepens our understanding.</p>
</blockquote>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/artificial-intelligence" term="artificial-intelligence" label="artificial intelligence" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/machine-learning" term="machine-learning" label="machine learning" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/design" term="design" label="design" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Linking to emails in org-mode (using neomutt)]]></title>
            <link href="https://mentat.za.net/blog/2018/10/31/using-org-mode-with-neomutt/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://mentat.za.net/blog/2016/12/15/org-mode-header-search/?utm_source=atom_feed" rel="related" type="text/html" title="Search headers in org-mode" />
                <link href="https://mentat.za.net/blog/2012/09/25/emacs-package-management/?utm_source=atom_feed" rel="related" type="text/html" title="Emacs package management" />
                <link href="https://mentat.za.net/blog/2016/10/20/websockets-in-python/?utm_source=atom_feed" rel="related" type="text/html" title="WebSockets in Python (and some Redux)" />
                <link href="https://mentat.za.net/blog/2016/09/14/tensorflow-gcc6-1/?utm_source=atom_feed" rel="related" type="text/html" title="Compile TensorFlow from source with gcc6.1" />
                <link href="https://mentat.za.net/blog/2016/02/26/matplotlib-on-osx/?utm_source=atom_feed" rel="related" type="text/html" title="Python &amp; Matplotlib on OSX" />
            
                <id>https://mentat.za.net/blog/2018/10/31/using-org-mode-with-neomutt/</id>
            
            
            <published>2018-10-31T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Where we store links to emails in org-mode, and open them using neomutt.</blockquote><p><em><strong>Update 2018-11-2:</strong> Change the URL scheme to <code>message://</code>.
See <a href="#other-systems">&ldquo;Other Systems&rdquo;</a> below.</em></p>
<p><a href="https://orgmode.org">org-mode</a> is, to me, is one of the most valuable
parts of the emacs ecosystem.  I use it to take notes, plan projects,
manage tasks, and write &amp; publish documents.</p>
<p>Nowadays, a lot of work arrives via email, and so it is helpful to be
able to refer to messages directly from my notes or lists of
tasks.</p>
<p>The <em>simplest</em> option might be to store URLs pointing to an online
inbox such as <a href="https://fastmail.com">Fastmail</a> or GMail, but I wanted
a solution that was both future proof (i.e., what if I moved my emails
to a different provider?) and worked with my terminal-based mail
client of choice, <a href="https://neomutt.org/">neomutt</a>.</p>
<p>I started with
a
<a href="https://upsilon.cc/~zack/blog/posts/2010/02/integrating_Mutt_with_Org-mode/">solution provided by Stefano Zacchiroli</a>,
and simplified it for my specific use-case.</p>
<h2 id="overview">Overview</h2>
<p>The solution has two parts: sending email links from neomutt to Emacs,
and later opening those links from Emacs by invoking neomutt.  The
first achieved via <code>org-protocol</code>, the latter via launching neomutt
and then simulating keypresses.</p>
<p>When launching neomutt, we have to tell it in which directory the
message lives.  We therefore use <code>notmuch</code> to find the message file
first, based on its Message-ID.  <code>maildir-utils</code> would be another way
of doing so.  <strong>Please note that you have to have notmuch or
maildir-utils set up already for this scheme to work.</strong></p>
<p>I initially avoided the <code>org-protocol</code> package, because installation
looked complicated.  That, it turns out, is only the case if you care
about web browser integration, which we don&rsquo;t.</p>
<h2 id="neomutt-configuration">Neomutt configuration</h2>
<p>First, we have a Python script that can parse an e-mail and share the
Message-ID and Subject with emacs.  I call it <code>mutt-save-org-link.py</code>,
and make it executable using <code>chmod +x mutt-save-org-link.py</code>.</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#60a0b0;font-style:italic">#!/usr/bin/env python3</span>

<span style="color:#007020;font-weight:bold">import</span> <span style="color:#0e84b5;font-weight:bold">sys</span>
<span style="color:#007020;font-weight:bold">import</span> <span style="color:#0e84b5;font-weight:bold">email</span>
<span style="color:#007020;font-weight:bold">import</span> <span style="color:#0e84b5;font-weight:bold">subprocess</span>
<span style="color:#007020;font-weight:bold">import</span> <span style="color:#0e84b5;font-weight:bold">urllib.parse</span>

<span style="color:#60a0b0;font-style:italic"># Parse the email from standard input</span>
message_bytes <span style="color:#666">=</span> sys<span style="color:#666">.</span>stdin<span style="color:#666">.</span>buffer<span style="color:#666">.</span>read()
message <span style="color:#666">=</span> email<span style="color:#666">.</span>message_from_bytes(message_bytes)

<span style="color:#60a0b0;font-style:italic"># Grab the relevant message headers</span>
message_id <span style="color:#666">=</span> urllib<span style="color:#666">.</span>parse<span style="color:#666">.</span>quote(message[<span style="color:#4070a0">&#39;message-id&#39;</span>][<span style="color:#40a070">1</span>:<span style="color:#666">-</span><span style="color:#40a070">1</span>])
subject <span style="color:#666">=</span> message[<span style="color:#4070a0">&#39;subject&#39;</span>]

<span style="color:#60a0b0;font-style:italic"># Ask emacsclient to save a link to the message</span>
subprocess<span style="color:#666">.</span>Popen([
    <span style="color:#4070a0">&#39;emacsclient&#39;</span>,
    f<span style="color:#4070a0">&#39;org-protocol://store-link?url=message://{message_id}&amp;title={subject}&#39;</span>
])
</code></pre></div><p>We then configure neomutt (typically in <code>~/.muttrc</code>) to call the
script with a shortcut.  I chose Esc-L (the same as Alt-L).</p>
<pre><code>macro index,pager \el &quot;|~/scripts/mutt-save-org-link.py\n&quot;
</code></pre><h2 id="emacs-configuration">Emacs configuration</h2>
<p>Using <code>org-protocol</code>, we instruct emacsclient to intercept URLs with
the <code>org-protocol://</code> scheme, as used by our <code>mutt-save-org-link.py</code>
script.  We also tell org-mode how to handle special URLs of the form
<code>message://message-id+goes_here@mail.gmail.com</code>.  Neomutt needs to know
which Maildir folder to open, so we ask <code>notmuch</code> to tell us where the
message is located.</p>
<p>In my <code>~/.emacs</code> file I have:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elisp" data-lang="elisp"><span style="color:#60a0b0;font-style:italic">; Make sure org-protocol is loaded</span>
<span style="color:#60a0b0;font-style:italic">; Now, org-protocol:// schemas are intercepted.</span>
(<span style="color:#007020">require</span> <span style="color:#bb60d5">org-protocol</span>)

<span style="color:#60a0b0;font-style:italic">; Call this function, which spawns neomutt, whenever org-mode</span>
<span style="color:#60a0b0;font-style:italic">; tries to open a link of the form message://message-id+goes_here@mail.gmail.com</span>
(<span style="color:#007020">defun</span> <span style="color:#bb60d5">stefanv/mutt-open-message</span> (<span style="color:#bb60d5">message-id</span>)
  <span style="color:#4070a0">&#34;In neomutt, open the email with the the given Message-ID&#34;</span>
  (<span style="color:#007020">let*</span>
      ((<span style="color:#bb60d5">message-id</span> (<span style="color:#bb60d5">replace-regexp-in-string</span> <span style="color:#4070a0">&#34;^/*&#34;</span> <span style="color:#4070a0">&#34;&#34;</span> <span style="color:#bb60d5">message-id</span>))
       (<span style="color:#bb60d5">mail-file</span>
        (<span style="color:#bb60d5">replace-regexp-in-string</span>
         <span style="color:#4070a0">&#34;\n$&#34;</span> <span style="color:#4070a0">&#34;&#34;</span> (<span style="color:#bb60d5">shell-command-to-string</span>
                   (<span style="color:#06287e">format</span> <span style="color:#4070a0">&#34;notmuch search --output=files id:%s&#34;</span> <span style="color:#bb60d5">message-id</span>))))
       (<span style="color:#bb60d5">mail-dir</span> (<span style="color:#bb60d5">replace-regexp-in-string</span> <span style="color:#4070a0">&#34;/\\(cur\\|new\\|tmp\\)/$&#34;</span> <span style="color:#4070a0">&#34;&#34;</span>
                                           (<span style="color:#06287e">file-name-directory</span> <span style="color:#bb60d5">mail-file</span>)))
       (<span style="color:#06287e">process-id</span> (<span style="color:#06287e">concat</span> <span style="color:#4070a0">&#34;neomutt-&#34;</span> <span style="color:#bb60d5">message-id</span>))
       (<span style="color:#bb60d5">message-id-escaped</span> (<span style="color:#06287e">regexp-quote</span> <span style="color:#bb60d5">message-id</span>))
       (<span style="color:#bb60d5">mutt-keystrokes</span>
        (<span style="color:#06287e">format</span> <span style="color:#4070a0">&#34;l~i %s\n\n&#34;</span> (<span style="color:#bb60d5">shell-quote-argument</span> <span style="color:#bb60d5">message-id-escaped</span>)))
       (<span style="color:#bb60d5">mutt-command</span> (<span style="color:#06287e">list</span> <span style="color:#4070a0">&#34;neomutt&#34;</span> <span style="color:#4070a0">&#34;-R&#34;</span> <span style="color:#4070a0">&#34;-f&#34;</span> <span style="color:#bb60d5">mail-dir</span>
                           <span style="color:#4070a0">&#34;-e&#34;</span> (<span style="color:#06287e">format</span> <span style="color:#4070a0">&#34;push &#39;%s&#39;&#34;</span> <span style="color:#bb60d5">mutt-keystrokes</span>))))

    (<span style="color:#06287e">message</span> <span style="color:#4070a0">&#34;Launching neomutt for message %s&#34;</span> <span style="color:#bb60d5">message-id</span>)
    (<span style="color:#06287e">call-process</span> <span style="color:#4070a0">&#34;setsid&#34;</span> <span style="color:#60add5">nil</span> <span style="color:#60add5">nil</span>
                   <span style="color:#4070a0">&#34;-f&#34;</span> <span style="color:#4070a0">&#34;gnome-terminal&#34;</span> <span style="color:#4070a0">&#34;--window&#34;</span> <span style="color:#4070a0">&#34;--&#34;</span>
                   <span style="color:#4070a0">&#34;neomutt&#34;</span> <span style="color:#4070a0">&#34;-R&#34;</span> <span style="color:#4070a0">&#34;-f&#34;</span> <span style="color:#bb60d5">mail-dir</span>
                   <span style="color:#4070a0">&#34;-e&#34;</span> (<span style="color:#06287e">format</span> <span style="color:#4070a0">&#34;push &#39;%s&#39;&#34;</span> <span style="color:#bb60d5">mutt-keystrokes</span>))))

<span style="color:#60a0b0;font-style:italic">; Whenever org-mode sees a link starting with `message://`, it</span>
<span style="color:#60a0b0;font-style:italic">; calls our `mutt-open-message` function</span>
(<span style="color:#bb60d5">org-add-link-type</span> <span style="color:#4070a0">&#34;message&#34;</span> <span style="color:#517918">&#39;stefanv/mutt-open-message</span>)
</code></pre></div><p>There are a few caveats: if you use <code>maildir-utils</code>, the search
command is <code>mu find -f l i:%s</code> instead of notmuch; and if you are not
on Linux, then <code>setsid</code> (which we use to launch a detached background
process) is not going to work, and you will want to use a different
terminal emulator.</p>
<h2 id="a-nameother-systemsaother-systems"><!-- raw HTML omitted --><!-- raw HTML omitted -->Other Systems</h2>
<p><a href="https://vxlabs.com/">Charl Botha</a> mentioned in the comments that, on
MacOS,
<a href="https://orgmode.org/worg/org-contrib/org-mac-link.html">org-mac-link</a>
lets you grab hyperlinks from a wide variety of apps.  Email messages,
specifically, are stored as <code>message://message-id</code> URLs, which MacOS
knows how to open.  This post has been updated to use the same link schema.</p>
<h2 id="wrap-up">Wrap-up</h2>
<p>That&rsquo;s it!  I&rsquo;ve added the code
to
<a href="https://github.com/stefanv/org-neomutt">https://github.com/stefanv/org-neomutt</a>.
Please file issues and PRs there, or tell me about your use cases
in the comments below.</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/org-mode" term="org-mode" label="org-mode" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/emacs" term="emacs" label="emacs" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/python" term="python" label="python" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/mutt" term="mutt" label="mutt" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Search headers in org-mode]]></title>
            <link href="https://mentat.za.net/blog/2016/12/15/org-mode-header-search/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://mentat.za.net/blog/2012/09/26/consolas-vs-source-code-pro/?utm_source=atom_feed" rel="related" type="text/html" title="Adobe&#39;s new free font: Source Code Pro" />
                <link href="https://mentat.za.net/blog/2012/09/25/emacs-package-management/?utm_source=atom_feed" rel="related" type="text/html" title="Emacs package management" />
            
                <id>https://mentat.za.net/blog/2016/12/15/org-mode-header-search/</id>
            
            
            <published>2016-12-15T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Where we show a quick way of navigating org-mode files.</blockquote><p>In org-mode, I often have the need to jump to a top-level heading
matching some word.</p>
<p>Since an org-mode buffer can be searched just like any other, I can
simply invoke forward search with <code>C-s</code>, but this will match <em>all</em>
occurrences of the text, instead of limiting the search to headings only.</p>
<p>This makes it hard to search for a phrase like &ldquo;Travel&rdquo;, for which I
have a top-level heading, but also often occurs elsewhere in my notes.</p>
<p>I have a solution of the following form:</p>
<ol>
<li>Launch a regular expression search</li>
<li>Pre-fill the text input with <code>^* </code> so that only headings are
matched.</li>
</ol>
<p>First, define a custom search function.  It puts the keys <code>^* </code> in the
&ldquo;unread command events&rdquo; list (i.e, a list of events waiting to be seen
by emacs), and then launches interactive forward regular expression search.</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elisp" data-lang="elisp">(<span style="color:#007020">defun</span> <span style="color:#bb60d5">stefan/isearch-heading</span> ()
  (<span style="color:#007020">interactive</span>)
  (<span style="color:#007020">setq</span> <span style="color:#bb60d5">unread-command-events</span> (<span style="color:#bb60d5">listify-key-sequence</span> <span style="color:#4070a0">&#34;^* &#34;</span>))
  (<span style="color:#bb60d5">isearch-mode</span> <span style="color:#60add5">t</span> <span style="color:#60add5">t</span> <span style="color:#60add5">nil</span> <span style="color:#60add5">t</span>))
</code></pre></div><p>Next, we add a keybinding for org-mode:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elisp" data-lang="elisp">(<span style="color:#007020">defun</span> <span style="color:#bb60d5">org-mode-keys</span> ()
  (<span style="color:#007020">interactive</span>)
  (<span style="color:#bb60d5">local-set-key</span> (<span style="color:#bb60d5">kbd</span> <span style="color:#4070a0">&#34;C-c g&#34;</span>) <span style="color:#517918">&#39;stefan/isearch-heading</span>)
)
(<span style="color:#bb60d5">add-hook</span> <span style="color:#517918">&#39;org-mode-hook</span> <span style="color:#517918">&#39;org-mode-keys</span>)
</code></pre></div><p>And that&rsquo;s it!  Pressing <code>C-c g</code> (for &ldquo;go&rdquo;) in org-mode will
now present you with a search prompt.  Typing a heading name will take you
there directly, at which point you can choose to expand it with the
TAB key.</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/emacs" term="emacs" label="emacs" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/org-mode" term="org-mode" label="org-mode" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[WebSockets in Python (and some Redux)]]></title>
            <link href="https://mentat.za.net/blog/2016/10/20/websockets-in-python/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://mentat.za.net/blog/2016/09/14/tensorflow-gcc6-1/?utm_source=atom_feed" rel="related" type="text/html" title="Compile TensorFlow from source with gcc6.1" />
                <link href="https://mentat.za.net/blog/2016/02/26/matplotlib-on-osx/?utm_source=atom_feed" rel="related" type="text/html" title="Python &amp; Matplotlib on OSX" />
                <link href="https://mentat.za.net/blog/2013/06/27/scipy2013-proceedings/?utm_source=atom_feed" rel="related" type="text/html" title="SciPy2013 Proceedings" />
                <link href="https://mentat.za.net/blog/2012/10/15/replicable-super-resolution-paper/?utm_source=atom_feed" rel="related" type="text/html" title="Replicable super-resolution paper" />
                <link href="https://mentat.za.net/blog/2012/09/30/scikits-image-0-dot-7/?utm_source=atom_feed" rel="related" type="text/html" title="scikits-image 0.7" />
            
                <id>https://mentat.za.net/blog/2016/10/20/websockets-in-python/</id>
            
            
            <published>2016-10-20T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Where we make pushing messages from a python backend to the browser easy.</blockquote><p>As part of our work on <a href="https://cesium-ml.org">Cesium</a> and its
<a href="https://github.com/cesium-ml/cesium_web">web frontend</a>,
we&rsquo;ve developed an easy
mechanism for Python web developers to
<a href="http://cesium-ml.org/blog/2016/07/13/a-pattern-for-websockets-in-python/">push messages from their Python backends to the browser</a>.</p>
<p>There are plenty of potential use cases, but consider, e.g., that you want
to verify a credit card number submitted by your user.  Traditionally, you&rsquo;d
submit the number, and then poll the backend repeatedly from the browser.  Not
very elegant :/</p>
<p>But with a WebSocket connection, you submit the credit card number and then
forget about it.  The <em>server</em> will let you know when it&rsquo;s done by pushing a
message to the frontend.</p>
<p>Not only does this solve the annoying polling problem, but it opens up the
door to an entirely new universe of tools, such as Dan Abramov&rsquo;s fantastic
<a href="http://redux.js.org/">Redux</a>.  Many of these Javascript libraries rely on the server
being able to notify the frontend when it needs to update itself.</p>
<p>Let&rsquo;s talk a bit about Redux.  The
<a href="http://redux.js.org/docs/introduction/ThreePrinciples.html">principles</a>
behind it are simple and elegant:</p>
<ol>
<li>The entire state of your app is centrally
stored (in the equivalent of a Python dictionary);</li>
<li>the state is immutable, and</li>
<li>can only be updated through a central function call.</li>
</ol>
<p>That centralization in turn enables other features such as logging, hot
reloading, time travel, etc.</p>
<p>One of the great joys of Redux lies in moving away from the traditional
Model-View-Controller pattern.  With MVC, you are never quite sure how changes
propagate through the system.  With Redux, it is highly predictable.  Say
your app has a toggle button, and associated state <code>{toggle: true}</code>.  An
action (e.g. &ldquo;the red button was clicked&rdquo;) is submitted to the central
dispatcher which then calculates the new state of the app:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">new_state <span style="color:#666">=</span> reduce(current_state, action)
</code></pre></div><p>The implementation could look something like this:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#007020;font-weight:bold">function</span> reduce(current_state, action) {
  <span style="color:#007020;font-weight:bold">switch</span> (action.type) {
    <span style="color:#007020;font-weight:bold">case</span> <span style="color:#4070a0">&#39;toggle_button&#39;</span><span style="color:#666">:</span>
      <span style="color:#007020;font-weight:bold">return</span> {toggle<span style="color:#666">:</span> <span style="color:#666">!</span>current_state.toggle}
    <span style="color:#007020;font-weight:bold">default</span><span style="color:#666">:</span>
      <span style="color:#007020;font-weight:bold">return</span> current_state;
  }
}
</code></pre></div><p>The toggle button monitors the app state, and when <code>state['toggle']</code> is
updated, re-renders itself.</p>
<p>By vastly simplifying flow of information, by
<a href="http://redux.js.org/docs/introduction/Motivation.html">disentangling mutation and asynchronicity</a>, and by
getting rid of JQuery &amp; hidden state stored somewhere in the bowels of the DOM,
Redux has, for me, returned the joy of web development.</p>
<p>But, I&rsquo;m getting distracted.  WebSockets&mdash;in Python!</p>
<p>Pushing messages from your Python web server to the user&rsquo;s browser can now be
<a href="https://github.com/cesium-ml/cesium_web/blob/e19e5543e193905da9555ce15fc71a52859c9fb0/cesium_app/handlers/base.py#L59">as simple as this</a>:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#007020;font-weight:bold">from</span> <span style="color:#0e84b5;font-weight:bold">Flow</span> <span style="color:#007020;font-weight:bold">import</span> flow

self<span style="color:#666">.</span>flow<span style="color:#666">.</span>push(<span style="color:#4070a0">&#39;my_user@domain.com&#39;</span>, <span style="color:#4070a0">&#39;message to the user&#39;</span>,
               {<span style="color:#4070a0">&#39;data&#39;</span>: <span style="color:#4070a0">&#39;to ship along&#39;</span>})
</code></pre></div><p>Please take a look at the more detailed technical description (with code!)
<a href="http://cesium-ml.org/blog/2016/07/13/a-pattern-for-websockets-in-python/">on the Cesium blog</a>.</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/web" term="web" label="web" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/python" term="python" label="python" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/javascript" term="javascript" label="javascript" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/websocket" term="websocket" label="websocket" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/redux" term="redux" label="redux" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/react" term="react" label="react" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Compile TensorFlow from source with gcc6.1]]></title>
            <link href="https://mentat.za.net/blog/2016/09/14/tensorflow-gcc6-1/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://mentat.za.net/blog/2016/02/26/matplotlib-on-osx/?utm_source=atom_feed" rel="related" type="text/html" title="Python &amp; Matplotlib on OSX" />
                <link href="https://mentat.za.net/blog/2013/06/27/scipy2013-proceedings/?utm_source=atom_feed" rel="related" type="text/html" title="SciPy2013 Proceedings" />
                <link href="https://mentat.za.net/blog/2012/10/15/replicable-super-resolution-paper/?utm_source=atom_feed" rel="related" type="text/html" title="Replicable super-resolution paper" />
                <link href="https://mentat.za.net/blog/2012/09/30/scikits-image-0-dot-7/?utm_source=atom_feed" rel="related" type="text/html" title="scikits-image 0.7" />
                <link href="https://mentat.za.net/blog/2012/09/25/emacs-package-management/?utm_source=atom_feed" rel="related" type="text/html" title="Emacs package management" />
            
                <id>https://mentat.za.net/blog/2016/09/14/tensorflow-gcc6-1/</id>
            
            
            <published>2016-09-14T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Where we build TensorFlow from scratch.</blockquote><p>Due to two bugs in gcc 6.1
<a href="https://github.com/google/re2/issues/102">affecting the re2 library</a>
(one of which has been fixed in 6.2)),
<a href="https://www.tensorflow.org/">TensorFlow</a> cannot be
<a href="https://www.tensorflow.org/versions/r0.10/get_started/os_setup.html">compiled from source</a>
one some systems (including my Debian Testing install).</p>
<p>To work around the issue, modify <code>tensorflow/workspace.bzl</code> and
change the re2 description to:</p>
<pre><code>native.git_repository(
  name = &quot;com_googlesource_code_re2&quot;,
  remote = &quot;https://github.com/stefanv/re2.git&quot;,
  commit = &quot;86503cb89d82b723ae0bce35e1e09524910cd319&quot;,
)
</code></pre><p>The re2 library is now downloaded from my fork, which applies a
<a href="https://github.com/stefanv/re2/commit/86503cb89d82b723ae0bce35e1e09524910cd319">one line patch</a>.</p>
<p>Compile the TensorFlow Python package as usual with:</p>
<pre><code>bazel build -c opt //tensorflow/tools/pip_package:build_pip_package
bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg
</code></pre><p>After installing the pip wheel using</p>
<pre><code>pip install /tmp/tensorflow_pkg/*.whl
</code></pre><p>you should have a working installation.  If importing fails with</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">ImportError: cannot import name &#39;pywrap_tensorflow&#39;
</code></pre></div><p>switch out of the TensorFlow source directory and try again.</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/tensorflow" term="tensorflow" label="tensorflow" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/python" term="python" label="python" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Amazon owns your ebooks]]></title>
            <link href="https://mentat.za.net/blog/2016/08/21/amazon-owns-your-ebooks/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://mentat.za.net/blog/2016/08/21/amazon-owns-your-ebooks/</id>
            
            
            <published>2016-08-21T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Where we realize Amazon owns your books.</blockquote><p>Did you know that Amazon does not sell ebooks?  But, wait, you say, I
have bought ebooks from them myself!  Sadly, that is not the case.  I
will summarize part of the
<a href="https://www.amazon.com/gp/help/customer/display.html?nodeId=201014950">Kindle Store Terms of Use</a> quoted
at the bottom of this post:</p>
<ol>
<li>You do not own any Kindle book that you have &ldquo;bought&rdquo;, even if it
said &ldquo;buy with one click&rdquo; in the store (the book still belongs to
Amazon, you&rsquo;re just leasing it).</li>
<li>You may only read Kindle content through sofware approved by
Amazon.</li>
<li>You may not copy ebooks &ldquo;bought&rdquo; from Amazon to other devices (such
as a Kobo or Nook reader).  In fact, you may not engage in any
activity that bypasses their Digital Rights Management (or DRM).</li>
</ol>
<p>I <!-- raw HTML omitted -->bought<!-- raw HTML omitted --> rent more than 120 Kindle books, and to my shame
only realized the invasive nature of these terms now.</p>
<p>Since your agreement with Amazon is simply a license to view material,
they have the ability to withdraw that right whenever they choose.
<a href="http://www.nytimes.com/2009/07/18/technology/companies/18amazon.html">Which they have done, in an ironic twist, with George Orwell&rsquo;s 1984</a>.</p>
<p>As you may imagine, this whole situation riles me up quite badly, and
spoils many a dinner-time conversation (sorry, friends).  I am
particularly irate because I just bought myself a beautiful
<a href="http://www.cnet.com/products/kobo-glo-hd/">Kobo Glo HD</a>, in a slow
but measured move to lessen my dependence on Amazon.  Now, lo and
behold, I cannot access any of the 120 books which, if I gave my money
to other ebook stores, I would have owned!</p>
<p>So, <em>caveat emptor</em>, dear reader.  <strong>Do not support Amazon&rsquo;s great
<a href="https://www.defectivebydesign.org/amazon-kindle-swindle">Kindle Swindle</a></strong>.</p>
<p>If you buy books from Kobo, you will be able to export your books to
your Kindle devices, albeit encumbered by Digital Rights Management (DRM).</p>
<h2 id="the-deal-with-digital-rights-management-drm">The deal with Digital Rights Management (DRM)</h2>
<p>While this post is about Amazon Kindle, it is worth mentioning Digital
Rights Management (DRM).  DRM is a mechanism that distributers use to
lock their books so that you may not easily copy it illegally.  Of
course, and very predictably, the DRM is not difficult to circumvent,
and those who want to steal electronic books do so with impunity.
Still, it is
<a href="https://en.wikipedia.org/wiki/Anti-circumvention#Fair_Use_and_Circumvention">probably illegal to remove DRM in the United States</a>,
and if you&rsquo;re a law abiding citizen, you cannot convert a protected
ebook to another format such as PDF, even if a PDF would be more
convenient for you.</p>
<p>Some distributors are worse than others, though, and unsurprisingly
Amazon is one of the worst.  Not only do they lock their books (making
it difficult to copy to other devices), but they use a proprietary
format (.mobi) that only works on <em>their</em> readers.  If you want to
copy their books to another device, you <em>have</em> to first remove the DRM
which, as their terms state, is not allowed.  You might start to
wonder whether such business practices aren&rsquo;t anti-competitive and
perhaps even illegal.</p>
<p>There is a perfectly usable format for ebooks already in existence
(.epub), that is also supported by many different models of readers.
So, while locking books with some kind of DRM is far from ideal, it is
still preferable to using a proprietary format to boot.</p>
<p>For those buying from the Kobo store, some of the books on their
shelves are available DRM-free, and is indicated as follows:</p>








<figure>
    <img
        
            sizes="(min-width: 35em) 1200px, 100vw"
              
            srcset='
            
                   https://mentat.za.net/blog/2016/08/21/amazon-owns-your-ebooks/kobo_drm_comparison_hua35d956db53d0bde6a95a19b28732de7_390966_480x0_resize_box_2.png 480w,
            
                   https://mentat.za.net/blog/2016/08/21/amazon-owns-your-ebooks/kobo_drm_comparison_hua35d956db53d0bde6a95a19b28732de7_390966_800x0_resize_box_2.png 800w,
            
                   https://mentat.za.net/blog/2016/08/21/amazon-owns-your-ebooks/kobo_drm_comparison_hua35d956db53d0bde6a95a19b28732de7_390966_1200x0_resize_box_2.png 1200w,
            
                   https://mentat.za.net/blog/2016/08/21/amazon-owns-your-ebooks/kobo_drm_comparison_hua35d956db53d0bde6a95a19b28732de7_390966_1500x0_resize_box_2.png 1500w,
            '

            
            
            src="https://mentat.za.net/blog/2016/08/21/amazon-owns-your-ebooks/kobo_drm_comparison_hua35d956db53d0bde6a95a19b28732de7_390966_800x0_resize_box_2.png"
            

        /> <figcaption>
            <h4>Kobo DRM information</h4>
        </figcaption>
</figure>

<p>Defective by Design maintains a
<a href="https://www.defectivebydesign.org/guide/ebooks">list of DRM-free publishers and stores</a>.</p>
<p>Please <a href="https://www.defectivebydesign.org/action">support</a> the
<a href="http://eff.org">Electronic Frontier Foundation</a>, who is currently
<a href="https://www.theguardian.com/technology/2016/jul/21/digital-millennium-copyright-act-eff-supreme-court">challenging DMCA Section 1201</a>
(which makes it illegal to circumvent DRM).  There is no good reason
why you should not be allowed to read material you bought on any
device of your choosing.  For more on the DRM, refer to author
<a href="https://www.theguardian.com/technology/blog/2014/feb/05/digital-rights-management">Cory Doctorow&rsquo;s articles in the Guardian</a>.</p>
<p>Below follows an excerpt, mentioned above, from the Amazon Kindle
Store&rsquo;s Terms of Use.</p>
<blockquote>
<p><strong>1. Kindle Content</strong></p>
<p><strong>Use of Kindle Content.</strong> Upon your download of Kindle Content and
payment of any applicable fees (including applicable taxes), the
Content Provider grants you a non-exclusive right to view, use, and
display such Kindle Content an unlimited number of times, solely
through a Reading Application or as otherwise permitted as part of
the Service, solely on the number of Supported Devices specified in
the Kindle Store, and solely for your personal, non-commercial
use. Kindle Content is licensed, not sold, to you by the Content
Provider. The Content Provider may include additional terms for use
within its Kindle Content. Those terms will also apply, but this
Agreement will govern in the event of a conflict. Some Kindle
Content, such as interactive or highly formatted content, may not be
available to you on all Reading Applications.</p>
<p><strong>Limitations.</strong> Unless specifically indicated otherwise, you may
not sell, rent, lease, distribute, broadcast, sublicense, or
otherwise assign any rights to the Kindle Content or any portion of
it to any third party, and you may not remove or modify any
proprietary notices or labels on the Kindle Content. In addition,
you may not attempt to bypass, modify, defeat, or otherwise
circumvent any digital rights management system or other content
protection or features used as part of the Service.</p>
</blockquote>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/drm" term="drm" label="drm" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/amazon" term="amazon" label="amazon" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/kindle" term="kindle" label="kindle" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/ebooks" term="ebooks" label="ebooks" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Python & Matplotlib on OSX]]></title>
            <link href="https://mentat.za.net/blog/2016/02/26/matplotlib-on-osx/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://mentat.za.net/blog/2013/06/27/scipy2013-proceedings/?utm_source=atom_feed" rel="related" type="text/html" title="SciPy2013 Proceedings" />
                <link href="https://mentat.za.net/blog/2012/10/15/replicable-super-resolution-paper/?utm_source=atom_feed" rel="related" type="text/html" title="Replicable super-resolution paper" />
                <link href="https://mentat.za.net/blog/2012/09/30/scikits-image-0-dot-7/?utm_source=atom_feed" rel="related" type="text/html" title="scikits-image 0.7" />
                <link href="https://mentat.za.net/blog/2012/09/25/emacs-package-management/?utm_source=atom_feed" rel="related" type="text/html" title="Emacs package management" />
            
                <id>https://mentat.za.net/blog/2016/02/26/matplotlib-on-osx/</id>
            
            
            <published>2016-02-26T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Where we discuss two ways of installing Matplotlib on MacOS.</blockquote><p>One day, we will hopefully have a grand unified build and package management
system for Python where everything is free &amp; open and Just Works (TM).  Until
then, you have two options:</p>
<h2 id="brew-python--pip">brew Python + pip</h2>
<ol>
<li><code>brew install python3</code></li>
<li><code>pyvenv -v ~/envs/py3</code></li>
<li><code>source ~/envs/py3/bin/activate</code></li>
<li><code>pip install matplotlib</code></li>
</ol>
<p>Pros/cons:</p>
<ul>
<li>Pip is the standard Python package management tool, and uses the official
Python Package Index (PyPi) repository.</li>
<li>Wheels on PyPi are built by authors themselves from open recipes.</li>
<li>Binary wheels may not be available for all packages.</li>
<li>Pip is not the best of package management tools.</li>
</ul>
<h2 id="conda">Conda</h2>
<ol>
<li>Download and install miniconda</li>
<li><code>conda create -n py3 python=3.5 matplotlib</code></li>
<li><code>source activate py3</code></li>
</ol>
<p>Pros/cons:</p>
<ul>
<li>Conda is a great package management tool.</li>
<li>Conda environments are well tested; almost everything works out of the
box.  This includes fast linear algebra using MKL.</li>
<li>Some of the conda build recipes are closed and binary wheels may not be
available for all packages<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</li>
<li>Conda and pip do not always play well together.</li>
<li>Conda packages are supported almost exclusively by a single company.</li>
</ul>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Some members of the community maintain <a href="https://conda-forge.github.io">their own channels</a>, but there are still some issues to
be aware of when <a href="https://github.com/conda-forge/conda-forge.github.io/issues/22">mixing those channels and the official ones</a>. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/python" term="python" label="python" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[VPN-only access to the internet]]></title>
            <link href="https://mentat.za.net/blog/2015/01/24/vpn-only-internet/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://mentat.za.net/blog/2012/09/26/consolas-vs-source-code-pro/?utm_source=atom_feed" rel="related" type="text/html" title="Adobe&#39;s new free font: Source Code Pro" />
            
                <id>https://mentat.za.net/blog/2015/01/24/vpn-only-internet/</id>
            
            
            <published>2015-01-24T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Where we set up a firewall that allows traffic to leave only via the VPN.</blockquote><p>A few days ago, I noticed that my outbound email wasn&rsquo;t being
delivered&mdash;it seems as if my ISP blocks access to some outbound ports.
An easy workaround is to route traffic through the work VPN, but
knowing myself I&rsquo;d forget to switch it on, leaving my outbound mail
stranded.</p>
<p>I needed a way of blocking <em>any</em> access to the internet, unless it was
leaving through the VPN (since I was sure I&rsquo;d notice <em>that</em> pretty
quickly).</p>
<p>I&rsquo;d have preferred to use firewalld, which is neatly integrated into
Ubuntu, but as of 01/24/2015 it
<a href="https://lists.fedorahosted.org/pipermail/firewalld-users/2014-October/000250.html">doesn&rsquo;t allow filtering outbound traffic</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. What
follows, then, is a simple approach implementing the following rule:</p>
<blockquote>
<p>Block wifi traffic unless it goes to either the local
network or the VPN.</p>
</blockquote>
<p>Create a script (I called it <code>~/scripts/fw-up</code>) that sets up the
firewall:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#007020">#!/bin/bash
</span><span style="color:#007020"></span>
<span style="color:#60a0b0;font-style:italic"># Clear any existing rules</span>
iptables -F

<span style="color:#60a0b0;font-style:italic"># Allow outbound DNS</span>
iptables -A OUTPUT -p udp --dport <span style="color:#40a070">53</span> -j ACCEPT
iptables -A INPUT -p udp --sport <span style="color:#40a070">53</span> -j ACCEPT

<span style="color:#60a0b0;font-style:italic"># Allow TCP access to the work VPN</span>
<span style="color:#60a0b0;font-style:italic"># Replace X.Y below with your VPN address range</span>
iptables -A OUTPUT -p tcp -d X.Y.0.0/16 -o wlan1 -j ACCEPT

<span style="color:#60a0b0;font-style:italic"># Allow any traffic destined for the vpn to go out</span>
iptables -A OUTPUT -o vpn0 -j ACCEPT

<span style="color:#60a0b0;font-style:italic"># Allow local traffic</span>
iptables -A OUTPUT -p tcp -o wlan1 -d 10.0.0.0/8 -j ACCEPT
iptables -A OUTPUT -p tcp -o wlan1 -d 172.16.0.0/12 -j ACCEPT
iptables -A OUTPUT -p tcp -o wlan1 -d 192.168.0.0/16 -j ACCEPT

<span style="color:#60a0b0;font-style:italic"># Drop everything else on the wifi</span>
iptables -A OUTPUT -p tcp -o wlan1 -j DROP
</code></pre></div><p>Make sure the script is set to executable (<code>chmod +x fw-up</code>).</p>
<p>Add a symlink to <code>if-up.d</code> to ensure that the firewall gets built
whenever the network is reconfigured:</p>
<pre><code>sudo ln -s ~/scripts/fw-up /etc/network/if-up.d/iptables
</code></pre><p>Now, whenever you connect to a wifi hotspot, internet traffic will be
blocked until you fire up your VPN.  If, on occasion, you need to work
without the VPN, simply raze the firewall:</p>
<pre><code>sudo iptables -F
</code></pre><p><strong>Update:</strong> Typically, you wouldn&rsquo;t want the firewall to go up when
connecting to the wireless at work, so I added the following conditional
in the <code>fw-up</code> script:</p>
<pre><code>iptables -F

if [[ `iwgetid -r` != 'WorkSSID' ]]; then
   # Firewall rules go here
   ...
fi
</code></pre><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>The idea would be to set up a zone, say
<code>vpn_only</code>, and to assign your home wifi SSID to it.  A direct rule that
blocks any non-VPN traffic can then be added to the new zone (this
should be possible soon, and is on the firewalld
<a href="https://git.fedorahosted.org/cgit/firewalld.git/tree/TODO">TODO list</a>). <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/linux" term="linux" label="linux" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Visualizing and pruning the docker image tree]]></title>
            <link href="https://mentat.za.net/blog/2015/01/18/docker-image-tree/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://mentat.za.net/blog/2015/01/18/docker-image-tree/</id>
            
            
            <published>2015-01-18T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Where we prune unused Docker images, and save a lot of disk space.</blockquote><p>Visualizing the Docker image dependency tree is a useful way of
checking image sizes and inter-image dependencies.  Since images
occupy a lot of disk space, we may also want to prune unused images.</p>
<h2 id="visualizing-image-dependencies">Visualizing image dependencies</h2>
<p>In version 1.2.0 of Docker, the image dependency tree is available via
the <code>docker images --tree</code> command:</p>
<pre><code>$ docker images --tree
Warning: '--tree' is deprecated, it will be removed soon. See usage.
├─511136ea3c5a Virtual Size: 0 B
│ ├─5bc37dc2dfba Virtual Size: 192.5 MB
│ │ └─61cb619d86bc Virtual Size: 192.7 MB
│ │   └─3f45ca85fedc Virtual Size: 192.7 MB
│ │     └─78e82ee876a2 Virtual Size: 192.7 MB
│ │       └─dc07507cef42 Virtual Size: 192.7 MB
│ │         └─86ce37374f40 Virtual Size: 192.7 MB
│ │           └─d76983dc2ebd Virtual Size: 213.3 MB
│ │             └─04a01662a6a8 Virtual Size: 214.5 MB
│ │               └─7769c00dfefe Virtual Size: 525.9 MB
│ │                 └─6ac8d6e449b1 Virtual Size: 525.9 MB
│ │                   └─e3a84ca24205 Virtual Size: 525.9 MB
│ │                     └─26f10d07659d Virtual Size: 525.9 MB
│ ├─e12c576ad8a1 Virtual Size: 198.9 MB
│ │ └─102eb2a101b8 Virtual Size: 199.1 MB
│ │   └─530dbbae98a0 Virtual Size: 199.1 MB
│ │     └─37dde56c3a42 Virtual Size: 199.1 MB
│ │       └─8f118367086c Virtual Size: 228.5 MB
│ │         └─277eb4304907 Virtual Size: 228.5 MB Tags: ubuntu:utopic, ubuntu:14.10
...
</code></pre><p>However, the Docker team is trying to streamline its client, and has
scheduled this feature for deprecation.  How, then, do we replicate
its behavior?</p>
<p>Enter <a href="https://github.com/justone/dockviz">DockerViz</a>.  Grab a binary
from <a href="http://gobuild.io/github.com/justone/dockviz">gobuild.io</a> and
place it somewhere on your path.</p>
<h3 id="querying-the-docker-image-status">Querying the Docker image status</h3>
<p>The Docker server can be queried via its
<a href="https://docs.docker.com/reference/api/docker_remote_api/">public API</a>.
It is typically available either on <code>http://localhost:4243</code> or
<code>/var/run/docker.sock</code>.</p>
<p>One of the following two calls should therefore extract the image
status:</p>
<pre><code>curl -s http://localhost:4243/images/json?all=1
echo -e &quot;GET /images/json?all=1 HTTP/1.0\r\n&quot; | nc -U /var/run/docker.sock
</code></pre><p>On my machine, the second query returns:</p>
<pre><code>HTTP/1.0 200 OK
Content-Type: application/json
Date: Sun, 18 Jan 2015 17:41:34 GMT

[{&quot;Created&quot;:1421528518,&quot;Id&quot;:&quot;d6244a9e8b5ff885579c8c7d203e4da703e3e80621449dbbd58c365dba5c83b1&quot;,&quot;ParentId&quot;:&quot;b68521997660ae8a6916037696cf716ca415bba0766487bfa5b79cda4adfb62c&quot;,&quot;RepoTags&quot;:[&quot;datascience-base:latest&quot;],&quot;Size&quot;:0,&quot;VirtualSize&quot;:2041562468}
,{&quot;Created&quot;:1421528517,&quot;Id&quot;:&quot;b68521997660ae8a6916037696cf716ca415bba0766487bfa5b79cda4adfb62c&quot;,&quot;ParentId&quot;:&quot;d3cb571e5e16fce16a59c16c87e01ea4051d7cae016dba90688c9e4a53a921c4&quot;,&quot;RepoTags&quot;:[&quot;\u003cnone\u003e:\u003cnone\u003e&quot;],&quot;Size&quot;:0,&quot;VirtualSize&quot;:2041562468}
...
</code></pre><p>DockViz parses this JSON and outputs a formatted tree:</p>
<pre><code>$ cat ~/scripts/docktree 
echo -e &quot;GET /images/json?all=1 HTTP/1.0\r\n&quot; | nc -U /var/run/docker.sock | tail -n +5 | dockviz images --tree
$ docktree
├─511136ea3c5a Virtual Size: 0.0 B
│ ├─5bc37dc2dfba Virtual Size: 192.5 MB
│ │ └─61cb619d86bc Virtual Size: 192.7 MB
│ │   └─3f45ca85fedc Virtual Size: 192.7 MB
│ │     └─78e82ee876a2 Virtual Size: 192.7 MB
│ │       └─dc07507cef42 Virtual Size: 192.7 MB
│ │         └─86ce37374f40 Virtual Size: 192.7 MB
│ │           └─d76983dc2ebd Virtual Size: 213.3 MB
│ │             └─04a01662a6a8 Virtual Size: 214.5 MB
│ │               └─7769c00dfefe Virtual Size: 525.9 MB
│ │                 └─6ac8d6e449b1 Virtual Size: 525.9 MB
│ │                   └─e3a84ca24205 Virtual Size: 525.9 MB
│ │                     └─26f10d07659d Virtual Size: 525.9 MB
│ ├─e12c576ad8a1 Virtual Size: 198.9 MB
│ │ └─102eb2a101b8 Virtual Size: 199.1 MB
│ │   └─530dbbae98a0 Virtual Size: 199.1 MB
│ │     └─37dde56c3a42 Virtual Size: 199.1 MB
│ │       └─8f118367086c Virtual Size: 228.5 MB
│ │         └─277eb4304907 Virtual Size: 228.5 MB Tags: ubuntu:14.10, ubuntu:utopic
</code></pre><p>Note that, on my system, the first branch of the tree is dangling,
i.e. not associated with a tagged image&ndash;I must have removed a tagged
image earlier, and these are its remaining dependencies.</p>
<h2 id="pruning-unusued-images">Pruning unusued images</h2>
<p>Built and downloaded Docker images quickly gobble up a lot of space:</p>
<pre><code>$ sudo du -hcs /var/lib/docker/
10G	/var/lib/docker/
10G	total
</code></pre><p>The <code>docker images</code> command allows us to
<a href="https://docs.docker.com/reference/commandline/cli/#images">list dangling images</a>:</p>
<pre><code>docker images --filter dangling=true --quiet
</code></pre><p>And we obtain a list of containers (images that were fired up and
modified) using:</p>
<pre><code>docker ps -aq
</code></pre><p>I remove both of these with the following script (WARNING: This
will delete ALL containers and any unused, downloaded images, so use
with caution!):</p>
<pre><code>#!/bin/bash
CONTAINERS=$(docker ps -aq)
IMAGES=$(docker images --filter dangling=true --quiet)
if [[ $CONTAINERS ]]; then
    docker rm $CONTAINERS
else
    echo &quot;No containers to remove&quot;
fi

if [[ $IMAGES ]]; then
    docker rmi $IMAGES
else
    echo &quot;No dangling images to remove&quot;
fi
</code></pre><p>Then:</p>
<pre><code>$ docker-clean
$ sudo du -hcs /var/lib/docker/
6.6G	/var/lib/docker/
6.6G	total
$ docktree
└─511136ea3c5a Virtual Size: 0.0 B
  ├─e12c576ad8a1 Virtual Size: 198.9 MB
  │ └─102eb2a101b8 Virtual Size: 199.1 MB
  │   └─530dbbae98a0 Virtual Size: 199.1 MB
  │     └─37dde56c3a42 Virtual Size: 199.1 MB
  │       └─8f118367086c Virtual Size: 228.5 MB
  │         └─277eb4304907 Virtual Size: 228.5 MB Tags: ubuntu:utopic, ubuntu:14.10
  ├─d497ad3926c8 Virtual Size: 192.5 MB
  │ └─ccb62158e970 Virtual Size: 192.7 MB
  │   └─e791be0477f2 Virtual Size: 192.7 MB
...
</code></pre><p>Note that, now, all branches of the tree are associated with tagged
images.  If I remove <code>ubuntu:utopic</code>, I can again run the pruning
process to get rid of its left-over dependencies.</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/docker" term="docker" label="docker" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[SciPy2013 Proceedings]]></title>
            <link href="https://mentat.za.net/blog/2013/06/27/scipy2013-proceedings/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://mentat.za.net/blog/2012/09/30/scikits-image-0-dot-7/?utm_source=atom_feed" rel="related" type="text/html" title="scikits-image 0.7" />
                <link href="https://mentat.za.net/blog/2012/09/25/emacs-package-management/?utm_source=atom_feed" rel="related" type="text/html" title="Emacs package management" />
                <link href="https://mentat.za.net/blog/2012/10/15/replicable-super-resolution-paper/?utm_source=atom_feed" rel="related" type="text/html" title="Replicable super-resolution paper" />
            
                <id>https://mentat.za.net/blog/2013/06/27/scipy2013-proceedings/</id>
            
            
            <published>2013-06-27T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Where I announce the SciPy 2013 proceedings, and talk about how we did it.</blockquote><p>The talks for the 12th (fantastic) Python in Science conference just concluded,
and I am happy to announce the
<a href="https://dl.dropboxusercontent.com/u/380268/scipy_2013_proceedings_draft.pdf">conference proceedings</a>.</p>
<p>This may come as a surprize to some, since in the past we have been unable to
publish the proceedings in a timely manner.  So, what changed?</p>
<h2 id="review-process">Review process</h2>
<p>For 2013 we followed a <strong>very light-weight review process, via comments on
GitHub pull-requests</strong>.  This change has an important consequence: in contrast
to the traditional review process, where reviewers critically pull apart
papers, the process now changes into a constructive conversation&ndash;the reviewer
becomes an ally to the author, helping them to get their paper signed off on.</p>
<p>In addition, this is a very familiar process to most members of our community
who regularly collaborate to open source projects.  Most such projects nowadays
follow a similar methodology for discussing and integrating patches.</p>
<h2 id="tools">Tools</h2>
<p>Since we can&rsquo;t expect reviewers to check out and build the papers themselves, a
<a href="http://stefan.pythonanywhere.com">paper build bot</a> is provided to generate
PDFs from pull-requests, which contain papers in plain-text ReStructuredText
format (see the
<a href="https://github.com/scipy/scipy_proceedings/tree/2013">proceedings repository</a> for
examples, and all papers starting 2010).</p>
<p>For authors, tools are provided to convert the ReStructuredText papers to
PDFs in IEEE Computer Society paper style.</p>
<h2 id="help-us-with-the-final-review">Help us with the final review</h2>
<p>We welcome your feedback on the proceedings!  If you spot a mistake, please
submit a pull request on
<a href="https://github.com/scipy/scipy_proceedings/tree/2013">GitHub</a>.</p>
<h2 id="thanks">Thanks</h2>
<p>Finally, a big shout-out to the amazing team of people who organized this
year&rsquo;s conference, and to the wonderfully inclusive and talented Scientific
Python community, of which I am proud to be part of.</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/scipy" term="scipy" label="scipy" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/python" term="python" label="python" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Replicable super-resolution paper]]></title>
            <link href="https://mentat.za.net/blog/2012/10/15/replicable-super-resolution-paper/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://mentat.za.net/blog/2012/09/30/scikits-image-0-dot-7/?utm_source=atom_feed" rel="related" type="text/html" title="scikits-image 0.7" />
                <link href="https://mentat.za.net/blog/2012/09/25/emacs-package-management/?utm_source=atom_feed" rel="related" type="text/html" title="Emacs package management" />
            
                <id>https://mentat.za.net/blog/2012/10/15/replicable-super-resolution-paper/</id>
            
            
            <published>2012-10-15T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<blockquote>Where I summarize 5 years of my life in 10 pages.</blockquote><p>While I loved the topic of my PhD, I had to take a break after staring at that
problem for several years.  Thereafter, I was side-tracked by
<a href="http://github.com/scipy">several</a> <a href="http://scikit-image.org">other</a>
<a href="http://dipy.org">projects</a>, and never got around to publishing a paper on
<a href="http://mentat.za.net/phd_dissertation.html">my dissertation</a>.</p>
<p>Here, then, is a summary of the simple but effective super-resolution algorithm
described therein:</p>
<p><a href="http://arxiv.org/abs/1210.3404">http://arxiv.org/abs/1210.3404</a></p>
<p>I also submitted this work to NIPS: the reviewers liked the paper, but they
were not convinced of its novelty.  Having spent a lot of time studying the
existing literature, all I can say in response is that, while solving the
problem as a sparse linear system was well known at the time, phrasing Drizzle
as a linear operator and using it for super-resolution was not.</p>
<p>But the proof of the pudding is in the eating! Have a look at the
<a href="http://mentat.za.net/supreme">results and published code</a> &ndash; you can download it all (including a
sample data-set) and play with the different reconstruction parameters.  Quite
a bit of the code has since graduated into <a href="http://scikit-image.org">scikit-image</a>.</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/super-resolution" term="super-resolution" label="super-resolution" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/image-processing" term="image-processing" label="image-processing" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/python" term="python" label="python" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/science" term="science" label="science" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[scikits-image 0.7]]></title>
            <link href="https://mentat.za.net/blog/2012/09/30/scikits-image-0-dot-7/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://mentat.za.net/blog/2012/09/25/emacs-package-management/?utm_source=atom_feed" rel="related" type="text/html" title="Emacs package management" />
            
                <id>https://mentat.za.net/blog/2012/09/30/scikits-image-0-dot-7/</id>
            
            
            <published>2012-09-30T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>We&rsquo;re happy to announce the 7th version of scikits-image!</p>
<p>Scikits-image is an image processing toolbox for SciPy that includes algorithms
for segmentation, geometric transformations, color space manipulation,
analysis, filtering, morphology, feature detection, and more.</p>
<p>For more information, examples, and documentation, please visit <a href="http://skimage.org">our website</a>.</p>
<h2 id="new-features">New Features</h2>
<p>It&rsquo;s been only 3 months since scikits-image 0.6 was released, but in that short
time, we&rsquo;ve managed to add plenty of new features and enhancements, including</p>
<ul>
<li>Geometric image transforms</li>
<li>3 new image segmentation routines (Felsenzwalb, Quickshift, SLIC)</li>
<li>Local binary patterns for texture characterization</li>
<li>Morphological reconstruction</li>
<li>Polygon approximation</li>
<li>CIE Lab color space conversion</li>
<li>Image pyramids</li>
<li>Multispectral support in random walker segmentation</li>
<li>Slicing, concatenation, and natural sorting of image collections</li>
<li>Perimeter and coordinates measurements in regionprops</li>
<li>An extensible image viewer based on Qt and Matplotlib, with plugins for edge
detection, line-profiling, and viewing image collections</li>
</ul>
<p>Plus, this release adds a number of bug fixes, new examples, and performance
enhancements.</p>








<figure>
    <img
        
            sizes="(min-width: 35em) 1200px, 100vw"
              
            srcset='
            
                   https://mentat.za.net/blog/2012/09/30/scikits-image-0-dot-7/lena_superpixels_hu6d489b99ce5d1ae95f2fbf5eee585e7c_146391_480x0_resize_q75_box.jpg 480w,
            
                   https://mentat.za.net/blog/2012/09/30/scikits-image-0-dot-7/lena_superpixels_hu6d489b99ce5d1ae95f2fbf5eee585e7c_146391_800x0_resize_q75_box.jpg 800w,
            
                   
            
                   
            '

            
            
            src="https://mentat.za.net/blog/2012/09/30/scikits-image-0-dot-7/lena_superpixels_hu6d489b99ce5d1ae95f2fbf5eee585e7c_146391_800x0_resize_q75_box.jpg"
            

        /> <figcaption>
            <h4>Comparison of pupular segmentation algorithms</h4>
        </figcaption>
</figure>

<h2 id="contributors-to-this-release">Contributors to this release</h2>
<p>This release was only possible due to the efforts of many contributors, both
new and old.</p>
<ul>
<li>Andreas Mueller</li>
<li>Andreas Wuerl</li>
<li>Andy Wilson</li>
<li>Brian Holt</li>
<li>Christoph Gohlke</li>
<li>Dharhas Pothina</li>
<li>Emmanuelle Gouillart</li>
<li>Guillaume Gay</li>
<li>Josh Warner</li>
<li>James Bergstra</li>
<li>Johannes Schönberger</li>
<li>Jonathan J. Helmus</li>
<li>Juan Nunez-Iglesias</li>
<li>Leon Tietz</li>
<li>Marianne Corvellec</li>
<li>Matt McCormick</li>
<li>Neil Yager</li>
<li>Nicolas Pinto</li>
<li>Nicolas Poilvert</li>
<li>Pavel Campr</li>
<li>Petter Strandmark</li>
<li>Stéfan van der Walt</li>
<li>Tim Sheerman-Chase</li>
<li>Tomas Kazmar</li>
<li>Tony S Yu</li>
<li>Wei Li</li>
</ul>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/image-processing" term="image-processing" label="image processing" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/scipy" term="scipy" label="scipy" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/python" term="python" label="python" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/science" term="science" label="science" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Adobe's new free font: Source Code Pro]]></title>
            <link href="https://mentat.za.net/blog/2012/09/26/consolas-vs-source-code-pro/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://mentat.za.net/blog/2012/09/25/emacs-package-management/?utm_source=atom_feed" rel="related" type="text/html" title="Emacs package management" />
            
                <id>https://mentat.za.net/blog/2012/09/26/consolas-vs-source-code-pro/</id>
            
            
            <published>2012-09-26T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Adobe yesterday
<a href="http://blogs.adobe.com/typblography/2012/09/source-code-pro.html">released its free and open source Type family, Source Code Pro</a>,
which includes an eye-pleasing monospace font  ideally suited for coding.
In the past, and at the recommendation of <a href="http://blog.fperez.org/">Fernando Perez</a>, I&rsquo;ve
used the beautiful (but non-free) <a href="http://www.microsoft.com/en-us/download/details.aspx?id=17879">Consolas by Microsoft</a>; now,
which is best?</p>
<p>To install on Linux:</p>
<ol>
<li><a href="https://github.com/adobe-fonts/source-sans-pro/releases/tag/variable-fonts">Grab the font</a>.</li>
<li>Copy the files to <code>~/.fonts</code>.</li>
<li>Run <code>fc-cache -f -v</code>.</li>
</ol>
<p>The font should now be available for selection in apps such as Firefox, Gnome
Terminal, etc.  To make it the default font in Emacs::</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">    (<span style="color:#bb60d5">set-default-font</span> <span style="color:#4070a0">&#34;Source Code Pro&#34;</span>)
</code></pre></div><p>Here&rsquo;s a comparison of Consolas (left) and Source Code Pro (right):</p>








<figure>
    <img
        
            sizes="(min-width: 35em) 1200px, 100vw"
              
            srcset='
            
                   https://mentat.za.net/blog/2012/09/26/consolas-vs-source-code-pro/consolas_vs_source_code_pro_hu5928cdeab65da44e521dbc3c8a0668a4_193237_480x0_resize_box_2.png 480w,
            
                   https://mentat.za.net/blog/2012/09/26/consolas-vs-source-code-pro/consolas_vs_source_code_pro_hu5928cdeab65da44e521dbc3c8a0668a4_193237_800x0_resize_box_2.png 800w,
            
                   https://mentat.za.net/blog/2012/09/26/consolas-vs-source-code-pro/consolas_vs_source_code_pro_hu5928cdeab65da44e521dbc3c8a0668a4_193237_1200x0_resize_box_2.png 1200w,
            
                   
            '

            
            
            src="https://mentat.za.net/blog/2012/09/26/consolas-vs-source-code-pro/consolas_vs_source_code_pro_hu5928cdeab65da44e521dbc3c8a0668a4_193237_800x0_resize_box_2.png"
            

        /> <figcaption>
            <h4>Comparison: Consolas vs Source Code Pro</h4>
        </figcaption>
</figure>

<p>Comments also on <a href="https://plus.google.com/104831275312843762750/posts/Ju6Ns8Dtuik">Google+</a>.</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/coding" term="coding" label="coding" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/emacs" term="emacs" label="emacs" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/linux" term="linux" label="linux" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Emacs package management]]></title>
            <link href="https://mentat.za.net/blog/2012/09/25/emacs-package-management/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://mentat.za.net/blog/2012/09/25/emacs-package-management/</id>
            
            
            <published>2012-09-25T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>I recently tried to install MuMaMo as one of the dependencies for Takafumi
Arakaki&rsquo;s <a href="https://github.com/tkf/emacs-ipython-notebook">Emacs-based IPython notebook</a>.  The instructions on the MuMaMo
webpage were as clear as mud and aimed primarily at Windows users.  Enters
<a href="https://github.com/dimitri/el-get">apt-get for Emacs</a>!</p>
<p>My Emacs setup is shared across multiple machines: a synchronized <code>elisp</code>
folder, containing <code>*.el</code> files, along with my <code>.emacs</code> configuration.
<code>el-get</code> allows you to share your package installation folder in a similar
fashion.  Here are some relevant configuration snippets:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-common-lisp" data-lang="common-lisp">
<span style="color:#60a0b0;font-style:italic">; Everything gets installed into ~/elisp, a folder</span>
<span style="color:#60a0b0;font-style:italic">; I sync across all my machines</span>

(<span style="color:#007020;font-weight:bold">setq</span> <span style="color:#bb60d5">el-get-dir</span> <span style="color:#4070a0">&#34;~/elisp/el-get&#34;</span>)
(<span style="color:#007020;font-weight:bold">setq</span> <span style="color:#bb60d5">el-get-install-dir</span> <span style="color:#4070a0">&#34;~/elisp/el-get/el-get&#34;</span>)
(<span style="color:#bb60d5">add-to-list</span> <span style="color:#517918">&#39;load-path</span> <span style="color:#bb60d5">el-get-install-dir</span>)

<span style="color:#60a0b0;font-style:italic">; If el-get is missing, install it automatically</span>

(<span style="color:#007020">unless</span> (<span style="color:#06287e">require</span> <span style="color:#517918">&#39;el-get</span> <span style="color:#60add5">nil</span> <span style="color:#60add5">t</span>)
  (<span style="color:#bb60d5">url-retrieve</span>
   <span style="color:#4070a0">&#34;https://raw.github.com/dimitri/el-get/master/el-get-install.el&#34;</span>
   (<span style="color:#007020">lambda</span> (<span style="color:#bb60d5">s</span>)
     (<span style="color:#bb60d5">goto-char</span> (<span style="color:#bb60d5">point-max</span>))
     (<span style="color:#bb60d5">eval-print-last-sexp</span>))))

<span style="color:#60a0b0;font-style:italic">; Install these packages, and call the specified configuration snippets</span>
<span style="color:#60a0b0;font-style:italic">; after each load</span>
(<span style="color:#007020;font-weight:bold">setq</span> <span style="color:#bb60d5">el-get-sources</span>
      <span style="color:#666">&#39;</span>(

        (<span style="color:#517918">:name</span> <span style="color:#bb60d5">ethan-wspace</span>
         <span style="color:#517918">:after</span> (<span style="color:#007020;font-weight:bold">progn</span>
                  (<span style="color:#bb60d5">global-ethan-wspace-mode</span> <span style="color:#40a070">1</span>)
                  (<span style="color:#bb60d5">set-face-background</span> <span style="color:#517918">&#39;ethan-wspace-face</span> <span style="color:#4070a0">&#34;gray95&#34;</span>)))

        (<span style="color:#517918">:name</span> <span style="color:#bb60d5">column-marker</span>
         <span style="color:#517918">:after</span> (<span style="color:#bb60d5">add-hook</span> <span style="color:#517918">&#39;font-lock-mode-hook</span>
                          (<span style="color:#007020">lambda</span> () (<span style="color:#bb60d5">interactive</span>) (<span style="color:#bb60d5">column-marker-1</span> <span style="color:#40a070">80</span>))))

<span style="color:#60a0b0;font-style:italic">; Also install these packages, no configuration required</span>
(<span style="color:#007020;font-weight:bold">setq</span> <span style="color:#bb60d5">my-packages</span>
      (<span style="color:#06287e">append</span>
       <span style="color:#666">&#39;</span>(<span style="color:#bb60d5">el-get</span> <span style="color:#bb60d5">maxframe</span> <span style="color:#bb60d5">markdown-mode</span> <span style="color:#bb60d5">ein</span> <span style="color:#bb60d5">python</span>)
       (<span style="color:#06287e">mapcar</span> <span style="color:#517918">&#39;el-get-source-name</span> <span style="color:#bb60d5">el-get-sources</span>)
       )
)

<span style="color:#60a0b0;font-style:italic">; Check packages and install any that are missing</span>
(<span style="color:#bb60d5">el-get</span> <span style="color:#517918">&#39;sync</span> <span style="color:#bb60d5">my-packages</span>)
</code></pre></div><p>There are two ways to specify packages to be installed: either include them in
the <code>my-packages</code> list, or add them to <code>el-get-sources</code>, which in addition
allows further customization upon successful loading of the package.</p>
<p><a href="http://software-carpentry.org/2012/09/whats-in-your-stack/">What&rsquo;s in your stack?</a> Here&rsquo;s my list of Emacs packages:</p>
<pre><code>Org Mode, Ethan's wspace, Tab Bar, Column Marker, Max Frame, EIN, Python,
JS2
</code></pre>
<p>Do you know of any other useful packages?  Let me know!</p>
<!-- raw HTML omitted -->
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://mentat.za.net/blog/tags/emacs" term="emacs" label="emacs" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/python" term="python" label="python" />
                             
                                <category scheme="https://mentat.za.net/blog/tags/scipy" term="scipy" label="scipy" />
                            
                        
                    
                
            
        </entry>
    
</feed>
