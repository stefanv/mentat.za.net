<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>St√©fan van der Walt - javascript</title><link href="https://mentat.za.net/blog/" rel="alternate"></link><link href="https://mentat.za.net/blog/feeds/tag_javascript.atom.xml" rel="self"></link><id>https://mentat.za.net/blog/</id><updated>2016-10-20T00:00:00-07:00</updated><entry><title>WebSockets in Python (and some Redux)</title><link href="https://mentat.za.net/blog/2016/10/20/websockets-in-python/" rel="alternate"></link><published>2016-10-20T00:00:00-07:00</published><updated>2016-10-20T00:00:00-07:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2016-10-20:/blog/2016/10/20/websockets-in-python/</id><summary type="html">&lt;p&gt;As part of our work on &lt;a href="http://cesium.ml"&gt;Cesium&lt;/a&gt; and its
&lt;a href="https://github.com/cesium-ml/cesium_web"&gt;web frontend&lt;/a&gt;,
we&amp;rsquo;ve developed an easy
mechanism for Python web developers to
&lt;a href="http://cesium.ml/blog/2016/07/13/a-pattern-for-websockets-in-python/"&gt;push messages from their Python backends to the browser&lt;/a&gt;.
</summary><content type="html">&lt;p&gt;As part of our work on &lt;a href="http://cesium.ml"&gt;Cesium&lt;/a&gt; and its
&lt;a href="https://github.com/cesium-ml/cesium_web"&gt;web frontend&lt;/a&gt;,
we&amp;rsquo;ve developed an easy
mechanism for Python web developers to
&lt;a href="http://cesium.ml/blog/2016/07/13/a-pattern-for-websockets-in-python/"&gt;push messages from their Python backends to the browser&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;There are plenty of potential use cases, but consider, e.g., that you want
to verify a credit card number submitted by your user.  Traditionally, you&amp;rsquo;d
submit the number, and then poll the backend repeatedly from the browser.  Not
very elegant :/&lt;/p&gt;
&lt;p&gt;But with a WebSocket connection, you submit the credit card number and then
forget about it.  The &lt;em&gt;server&lt;/em&gt; will let you know when it&amp;rsquo;s done by pushing a
message to the frontend.&lt;/p&gt;
&lt;p&gt;Not only does this solve the annoying polling problem, but it opens up the
door to an entirely new universe of tools, such as Dan Abramov&amp;rsquo;s fantastic
&lt;a href="http://redux.js.org/"&gt;Redux&lt;/a&gt;.  Many of these Javascript libraries rely on the server
being able to notify the frontend when it needs to update itself.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s talk a bit about Redux.  The
&lt;a href="http://redux.js.org/docs/introduction/ThreePrinciples.html"&gt;principles&lt;/a&gt;
behind it are simple and elegant:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The entire state of your app is centrally
stored (in the equivalent of a Python dictionary);&lt;/li&gt;
&lt;li&gt;the state is immutable, and&lt;/li&gt;
&lt;li&gt;can only be updated through a central function call.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That centralization in turn enables other features such as logging, hot
reloading, time travel, etc.&lt;/p&gt;
&lt;p&gt;One of the great joys of Redux lies in moving away from the traditional
Model-View-Controller pattern.  With MVC, you are never quite sure how changes
propagate through the system.  With Redux, it is highly predictable.  Say
your app has a toggle button, and associated state &lt;code&gt;{toggle: true}&lt;/code&gt;.  An
action (e.g. &amp;ldquo;the red button was clicked&amp;rdquo;) is submitted to the central
dispatcher which then calculates the new state of the app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;new_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The implementation could look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;toggle_button&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The toggle button monitors the app state, and when &lt;code&gt;state['toggle']&lt;/code&gt; is
updated, re-renders itself.&lt;/p&gt;
&lt;p&gt;By vastly simplifying flow of information, by
&lt;a href="http://redux.js.org/docs/introduction/Motivation.html"&gt;disentangling mutation and asynchronicity&lt;/a&gt;, and by
getting rid of JQuery &amp;amp; hidden state stored somewhere in the bowels of the DOM,
Redux has, for me, returned the joy of web development.&lt;/p&gt;
&lt;p&gt;But, I&amp;rsquo;m getting distracted.  WebSockets&amp;mdash;in Python!&lt;/p&gt;
&lt;p&gt;Pushing messages from your Python web server to the user&amp;rsquo;s browser can now be
&lt;a href="https://github.com/cesium-ml/cesium_web/blob/e19e5543e193905da9555ce15fc71a52859c9fb0/cesium_app/handlers/base.py#L59"&gt;as simple as this&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Flow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;flow&lt;/span&gt;

&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_user@domain.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;message to the user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;to ship along&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please take a look at the more detailed technical description (with code!)
&lt;a href="http://cesium.ml/blog/2016/07/13/a-pattern-for-websockets-in-python/"&gt;on the Cesium blog&lt;/a&gt;.&lt;/p&gt;</content><category term="web"></category><category term="python"></category><category term="javascript"></category><category term="websocket"></category><category term="redux"></category><category term="react"></category></entry></feed>