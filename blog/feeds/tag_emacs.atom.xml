<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>St√©fan van der Walt - emacs</title><link href="https://mentat.za.net/blog/" rel="alternate"></link><link href="https://mentat.za.net/blog/feeds/tag_emacs.atom.xml" rel="self"></link><id>https://mentat.za.net/blog/</id><updated>2018-10-31T00:00:00-07:00</updated><entry><title>Linking to emails in org-mode (using neomutt)</title><link href="https://mentat.za.net/blog/2018/10/31/using-org-mode-with-neomutt/" rel="alternate"></link><published>2018-10-31T00:00:00-07:00</published><updated>2018-10-31T00:00:00-07:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2018-10-31:/blog/2018/10/31/using-org-mode-with-neomutt/</id><summary type="html">&lt;p&gt;Where we store links to emails in org-mode, and open them using neomutt.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update 2018-11-2:&lt;/strong&gt; Change the URL scheme to &lt;code&gt;message://&lt;/code&gt;.
See &lt;a href="#other-systems"&gt;&amp;ldquo;Other Systems&amp;rdquo;&lt;/a&gt; below.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://orgmode.org"&gt;org-mode&lt;/a&gt; is, to me, is one of the most valuable
parts of the emacs ecosystem.  I use it to take notes, plan projects,
manage tasks, and write &amp;amp; publish documents.&lt;/p&gt;
&lt;p&gt;Nowadays, a lot of work arrives via email, and so it is helpful to be
able to refer to messages directly from my notes or lists of
tasks.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;simplest&lt;/em&gt; option might be to store URLs pointing to an online
inbox such as &lt;a href="https://fastmail.com"&gt;Fastmail&lt;/a&gt; or GMail, but I wanted
a solution that was both future proof (i.e., what if I moved my emails
to a different provider?) and worked with my terminal-based mail
client of choice, &lt;a href="https://neomutt.org/"&gt;neomutt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I started with
a
&lt;a href="https://upsilon.cc/~zack/blog/posts/2010/02/integrating_Mutt_with_Org-mode/"&gt;solution provided by Stefano Zacchiroli&lt;/a&gt;,
and simplified it for my specific use-case.&lt;/p&gt;
&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;The solution has two parts: sending email links from neomutt to Emacs,
and later opening those links from Emacs by invoking neomutt.  The
first achieved via &lt;code&gt;org-protocol&lt;/code&gt;, the latter via launching neomutt
and then simulating keypresses.&lt;/p&gt;
&lt;p&gt;When launching neomutt, we have to tell it in which directory the
message lives.  We therefore use &lt;code&gt;notmuch&lt;/code&gt; to find the message file
first, based on its Message-ID.  &lt;code&gt;maildir-utils&lt;/code&gt; would be another way
of doing so.  &lt;strong&gt;Please note that you have to have notmuch or
maildir-utils set up already for this scheme to work.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I initially avoided the &lt;code&gt;org-protocol&lt;/code&gt; package, because installation
looked complicated.  That, it turns out, is only the case if you care
about web browser integration, which we don&amp;rsquo;t.&lt;/p&gt;
&lt;h2 id="neomutt-configuration"&gt;Neomutt configuration&lt;/h2&gt;
&lt;p&gt;First, we have a Python script that can parse an e-mail and share the
Message-ID and Subject with emacs.  I call it &lt;code&gt;mutt-save-org-link.py&lt;/code&gt;,
and make it executable using &lt;code&gt;chmod +x mutt-save-org-link.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt;

&lt;span class="c1"&gt;# Parse the email from standard input&lt;/span&gt;
&lt;span class="n"&gt;message_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message_from_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Grab the relevant message headers&lt;/span&gt;
&lt;span class="n"&gt;message_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message-id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Ask emacsclient to save a link to the message&lt;/span&gt;
&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;emacsclient&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;org-protocol://store-link?url=message://{message_id}&amp;amp;title={subject}&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We then configure neomutt (typically in &lt;code&gt;~/.muttrc&lt;/code&gt;) to call the
script with a shortcut.  I chose Esc-L (the same as Alt-L).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;macro index,pager \el &amp;quot;|~/scripts/mutt-save-org-link.py\n&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="emacs-configuration"&gt;Emacs configuration&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;org-protocol&lt;/code&gt;, we instruct emacsclient to intercept URLs with
the &lt;code&gt;org-protocol://&lt;/code&gt; scheme, as used by our &lt;code&gt;mutt-save-org-link.py&lt;/code&gt;
script.  We also tell org-mode how to handle special URLs of the form
&lt;code&gt;message://message-id+goes_here@mail.gmail.com&lt;/code&gt;.  Neomutt needs to know
which Maildir folder to open, so we ask &lt;code&gt;notmuch&lt;/code&gt; to tell us where the
message is located.&lt;/p&gt;
&lt;p&gt;In my &lt;code&gt;~/.emacs&lt;/code&gt; file I have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; Make sure org-protocol is loaded&lt;/span&gt;
&lt;span class="c1"&gt;; Now, org-protocol:// schemas are intercepted.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="nv"&gt;org-protocol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; Call this function, which spawns neomutt, whenever org-mode&lt;/span&gt;
&lt;span class="c1"&gt;; tries to open a link of the form message://message-id+goes_here@mail.gmail.com&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;stefanv/mutt-open-message&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message-id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;In neomutt, open the email with the the given Message-ID&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt;
      &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;message-id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^/*&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;message-id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mail-file&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;\n$&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-command-to-string&lt;/span&gt;
                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;notmuch search --output=files id:%s&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;message-id&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mail-dir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/\\(cur\\|new\\|tmp\\)/$&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-name-directory&lt;/span&gt; &lt;span class="nv"&gt;mail-file&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;process-id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;neomutt-&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;message-id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message-id-escaped&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;regexp-quote&lt;/span&gt; &lt;span class="nv"&gt;message-id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mutt-keystrokes&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;l~i %s\n\n&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-quote-argument&lt;/span&gt; &lt;span class="nv"&gt;message-id-escaped&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mutt-command&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;neomutt&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-R&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mail-dir&lt;/span&gt;
                           &lt;span class="s"&gt;&amp;quot;-e&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;push &amp;#39;%s&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mutt-keystrokes&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Launching neomutt for message %s&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;message-id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;call-process&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;setsid&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
                   &lt;span class="s"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gnome-terminal&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--window&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;
                   &lt;span class="s"&gt;&amp;quot;neomutt&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-R&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mail-dir&lt;/span&gt;
                   &lt;span class="s"&gt;&amp;quot;-e&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;push &amp;#39;%s&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mutt-keystrokes&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="c1"&gt;; Whenever org-mode sees a link starting with `message://`, it&lt;/span&gt;
&lt;span class="c1"&gt;; calls our `mutt-open-message` function&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-add-link-type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;stefanv/mutt-open-message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are a few caveats: if you use &lt;code&gt;maildir-utils&lt;/code&gt;, the search
command is &lt;code&gt;mu find -f l i:%s&lt;/code&gt; instead of notmuch; and if you are not
on Linux, then &lt;code&gt;setsid&lt;/code&gt; (which we use to launch a detached background
process) is not going to work, and you will want to use a different
terminal emulator.&lt;/p&gt;
&lt;h2 id="other-systems"&gt;&lt;a name="#other-systems"&gt;&lt;/a&gt;Other Systems&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://vxlabs.com/"&gt;Charl Botha&lt;/a&gt; mentioned in the comments that, on
MacOS,
&lt;a href="https://orgmode.org/worg/org-contrib/org-mac-link.html"&gt;org-mac-link&lt;/a&gt;
lets you grab hyperlinks from a wide variety of apps.  Email messages,
specifically, are stored as &lt;code&gt;message://message-id&lt;/code&gt; URLs, which MacOS
knows how to open.  This post has been updated to use the same link schema.&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s it!  I&amp;rsquo;ve added the code
to
&lt;a href="https://github.com/stefanv/org-neomutt"&gt;https://github.com/stefanv/org-neomutt&lt;/a&gt;.
Please file issues and PRs there, or tell me about your use cases
in the comments below.&lt;/p&gt;</content><category term="org-mode"></category><category term="emacs"></category><category term="python"></category><category term="mutt"></category></entry><entry><title>Search headers in org-mode</title><link href="https://mentat.za.net/blog/2016/12/15/org-mode-header-search/" rel="alternate"></link><published>2016-12-15T00:00:00-08:00</published><updated>2016-12-15T00:00:00-08:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2016-12-15:/blog/2016/12/15/org-mode-header-search/</id><summary type="html">&lt;p&gt;Where we show a quick way of navigating org-mode files.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In org-mode, I often have the need to jump to a top-level heading
matching some word.&lt;/p&gt;
&lt;p&gt;Since an org-mode buffer can be searched just like any other, I can
simply invoke forward search with &lt;code&gt;C-s&lt;/code&gt;, but this will match &lt;em&gt;all&lt;/em&gt;
occurrences of the text, instead of limiting the search to headings only.&lt;/p&gt;
&lt;p&gt;This makes it hard to search for a phrase like &amp;ldquo;Travel&amp;rdquo;, for which I
have a top-level heading, but also often occurs elsewhere in my notes.&lt;/p&gt;
&lt;p&gt;I have a solution of the following form:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Launch a regular expression search&lt;/li&gt;
&lt;li&gt;Pre-fill the text input with &lt;code&gt;^*&lt;/code&gt; so that only headings are
   matched.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First, define a custom search function.  It puts the keys &lt;code&gt;^*&lt;/code&gt; in the
&amp;ldquo;unread command events&amp;rdquo; list (i.e, a list of events waiting to be seen
by emacs), and then launches interactive forward regular expression search.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;stefan/isearch-heading&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;unread-command-events&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;listify-key-sequence&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^* &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;isearch-mode&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we add a keybinding for org-mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;org-mode-keys&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;local-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;stefan/isearch-heading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;org-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;org-mode-keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that&amp;rsquo;s it!  Pressing &lt;code&gt;C-c g&lt;/code&gt; (for &amp;ldquo;go&amp;rdquo;) in org-mode will
now present you with a search prompt.  Typing a heading name will take you
there directly, at which point you can choose to expand it with the
TAB key.&lt;/p&gt;</content><category term="emacs"></category><category term="org-mode"></category></entry><entry><title>Adobe's new free font: Source Code Pro</title><link href="https://mentat.za.net/blog/2012/09/26/consolas-vs-source-code-pro/" rel="alternate"></link><published>2012-09-26T11:49:00-07:00</published><updated>2012-09-26T11:49:00-07:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2012-09-26:/blog/2012/09/26/consolas-vs-source-code-pro/</id><summary type="html">&lt;p&gt;Adobe yesterday
&lt;a href="http://blogs.adobe.com/typblography/2012/09/source-code-pro.html"&gt;released its free and open source Type family, Source Code Pro&lt;/a&gt;,
which includes an eye-pleasing monospace font  ideally suited for coding.
In the past, and at the recommendation of &lt;a href="http://blog.fperez.org/"&gt;Fernando Perez&lt;/a&gt;, I&amp;rsquo;ve
used the beautiful (but non-free) &lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=17879"&gt;Consolas by Microsoft&lt;/a&gt;; now,
which is best?&lt;/p&gt;
&lt;p&gt;To install on ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Adobe yesterday
&lt;a href="http://blogs.adobe.com/typblography/2012/09/source-code-pro.html"&gt;released its free and open source Type family, Source Code Pro&lt;/a&gt;,
which includes an eye-pleasing monospace font  ideally suited for coding.
In the past, and at the recommendation of &lt;a href="http://blog.fperez.org/"&gt;Fernando Perez&lt;/a&gt;, I&amp;rsquo;ve
used the beautiful (but non-free) &lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=17879"&gt;Consolas by Microsoft&lt;/a&gt;; now,
which is best?&lt;/p&gt;
&lt;p&gt;To install on Linux:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/adobe-fonts/source-sans-pro/releases/tag/variable-fonts"&gt;Grab the font&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Copy the files to &lt;code&gt;~/.fonts&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;fc-cache -f -v&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The font should now be available for selection in apps such as Firefox, Gnome
Terminal, etc.  To make it the default font in Emacs::&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;set-default-font&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Source Code Pro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;rsquo;s a comparison of Consolas (left) and Source Code Pro (right):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Comparison: Consolas vs Source Code Pro" src="https://mentat.za.net/blog/images/consolas_vs_source_code_pro.png" /&gt;&lt;/p&gt;
&lt;p&gt;Comments also on &lt;a href="https://plus.google.com/104831275312843762750/posts/Ju6Ns8Dtuik"&gt;Google+&lt;/a&gt;.&lt;/p&gt;</content><category term="coding"></category><category term="emacs"></category><category term="linux"></category></entry><entry><title>Emacs package management</title><link href="https://mentat.za.net/blog/2012/09/25/emacs-package-management/" rel="alternate"></link><published>2012-09-25T17:14:00-07:00</published><updated>2012-09-25T17:14:00-07:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2012-09-25:/blog/2012/09/25/emacs-package-management/</id><summary type="html">&lt;p&gt;I recently tried to install MuMaMo as one of the dependencies for Takafumi
Arakaki&amp;rsquo;s &lt;a href="https://github.com/tkf/emacs-ipython-notebook"&gt;Emacs-based IPython notebook&lt;/a&gt;.  The instructions on the MuMaMo
webpage were as clear as mud and aimed primarily at Windows users.  Enters
&lt;a href="https://github.com/dimitri/el-get"&gt;apt-get for Emacs&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;My Emacs setup is shared across multiple machines: a synchronized &lt;code&gt;elisp ‚Ä¶&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently tried to install MuMaMo as one of the dependencies for Takafumi
Arakaki&amp;rsquo;s &lt;a href="https://github.com/tkf/emacs-ipython-notebook"&gt;Emacs-based IPython notebook&lt;/a&gt;.  The instructions on the MuMaMo
webpage were as clear as mud and aimed primarily at Windows users.  Enters
&lt;a href="https://github.com/dimitri/el-get"&gt;apt-get for Emacs&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;My Emacs setup is shared across multiple machines: a synchronized &lt;code&gt;elisp&lt;/code&gt;
folder, containing &lt;code&gt;*.el&lt;/code&gt; files, along with my &lt;code&gt;.emacs&lt;/code&gt; configuration.
&lt;code&gt;el-get&lt;/code&gt; allows you to share your package installation folder in a similar
fashion.  Here are some relevant configuration snippets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; Everything gets installed into ~/elisp, a folder&lt;/span&gt;
&lt;span class="c1"&gt;; I sync across all my machines&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;el-get-dir&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/elisp/el-get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;el-get-install-dir&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/elisp/el-get/el-get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;load-path&lt;/span&gt; &lt;span class="nv"&gt;el-get-install-dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; If el-get is missing, install it automatically&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;el-get&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url-retrieve&lt;/span&gt;
   &lt;span class="s"&gt;&amp;quot;https://raw.github.com/dimitri/el-get/master/el-get-install.el&amp;quot;&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;eval-print-last-sexp&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="c1"&gt;; Install these packages, and call the specified configuration snippets&lt;/span&gt;
&lt;span class="c1"&gt;; after each load&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;el-get-sources&lt;/span&gt;
      &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;

        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;ethan-wspace&lt;/span&gt;
         &lt;span class="ss"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;progn&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-ethan-wspace-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;set-face-background&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;ethan-wspace-face&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gray95&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;column-marker&lt;/span&gt;
         &lt;span class="ss"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;font-lock-mode-hook&lt;/span&gt;
                          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;column-marker-1&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="c1"&gt;; Also install these packages, no configuration required&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;my-packages&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;
       &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;el-get&lt;/span&gt; &lt;span class="nv"&gt;maxframe&lt;/span&gt; &lt;span class="nv"&gt;markdown-mode&lt;/span&gt; &lt;span class="nv"&gt;ein&lt;/span&gt; &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;mapcar&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;el-get-source-name&lt;/span&gt; &lt;span class="nv"&gt;el-get-sources&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; Check packages and install any that are missing&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;el-get&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;sync&lt;/span&gt; &lt;span class="nv"&gt;my-packages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are two ways to specify packages to be installed: either include them in
the &lt;code&gt;my-packages&lt;/code&gt; list, or add them to &lt;code&gt;el-get-sources&lt;/code&gt;, which in addition
allows further customization upon successful loading of the package.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://software-carpentry.org/2012/09/whats-in-your-stack/"&gt;What&amp;rsquo;s in your stack?&lt;/a&gt; Here&amp;rsquo;s my list of Emacs packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Org Mode, Ethan&amp;#39;s wspace, Tab Bar, Column Marker, Max Frame, EIN, Python,
JS2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do you know of any other useful packages?  Let me know!&lt;/p&gt;
&lt;!-- References --&gt;</content><category term="emacs"></category><category term="python"></category><category term="scipy"></category></entry></feed>