<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>St√©fan van der Walt - python</title><link href="https://mentat.za.net/blog/" rel="alternate"></link><link href="https://mentat.za.net/blog/feeds/tag_python.atom.xml" rel="self"></link><id>https://mentat.za.net/blog/</id><updated>2018-10-31T00:00:00-07:00</updated><entry><title>Linking to emails in org-mode (using neomutt)</title><link href="https://mentat.za.net/blog/2018/10/31/using-org-mode-with-neomutt/" rel="alternate"></link><published>2018-10-31T00:00:00-07:00</published><updated>2018-10-31T00:00:00-07:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2018-10-31:/blog/2018/10/31/using-org-mode-with-neomutt/</id><summary type="html">&lt;p&gt;Where we store links to emails in org-mode, and open them using neomutt.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update 2018-11-2:&lt;/strong&gt; Change the URL scheme to &lt;code&gt;message://&lt;/code&gt;.
See &lt;a href="#other-systems"&gt;&amp;ldquo;Other Systems&amp;rdquo;&lt;/a&gt; below.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://orgmode.org"&gt;org-mode&lt;/a&gt; is, to me, is one of the most valuable
parts of the emacs ecosystem.  I use it to take notes, plan projects,
manage tasks, and write &amp;amp; publish documents.&lt;/p&gt;
&lt;p&gt;Nowadays, a lot of work arrives via email, and so it is helpful to be
able to refer to messages directly from my notes or lists of
tasks.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;simplest&lt;/em&gt; option might be to store URLs pointing to an online
inbox such as &lt;a href="https://fastmail.com"&gt;Fastmail&lt;/a&gt; or GMail, but I wanted
a solution that was both future proof (i.e., what if I moved my emails
to a different provider?) and worked with my terminal-based mail
client of choice, &lt;a href="https://neomutt.org/"&gt;neomutt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I started with
a
&lt;a href="https://upsilon.cc/~zack/blog/posts/2010/02/integrating_Mutt_with_Org-mode/"&gt;solution provided by Stefano Zacchiroli&lt;/a&gt;,
and simplified it for my specific use-case.&lt;/p&gt;
&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;The solution has two parts: sending email links from neomutt to Emacs,
and later opening those links from Emacs by invoking neomutt.  The
first achieved via &lt;code&gt;org-protocol&lt;/code&gt;, the latter via launching neomutt
and then simulating keypresses.&lt;/p&gt;
&lt;p&gt;When launching neomutt, we have to tell it in which directory the
message lives.  We therefore use &lt;code&gt;notmuch&lt;/code&gt; to find the message file
first, based on its Message-ID.  &lt;code&gt;maildir-utils&lt;/code&gt; would be another way
of doing so.  &lt;strong&gt;Please note that you have to have notmuch or
maildir-utils set up already for this scheme to work.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I initially avoided the &lt;code&gt;org-protocol&lt;/code&gt; package, because installation
looked complicated.  That, it turns out, is only the case if you care
about web browser integration, which we don&amp;rsquo;t.&lt;/p&gt;
&lt;h2 id="neomutt-configuration"&gt;Neomutt configuration&lt;/h2&gt;
&lt;p&gt;First, we have a Python script that can parse an e-mail and share the
Message-ID and Subject with emacs.  I call it &lt;code&gt;mutt-save-org-link.py&lt;/code&gt;,
and make it executable using &lt;code&gt;chmod +x mutt-save-org-link.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="c1"&gt;# Parse the email from standard input&lt;/span&gt;
&lt;span class="n"&gt;message_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message_from_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Grab the relevant message headers&lt;/span&gt;
&lt;span class="n"&gt;message_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message-id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Ask emacsclient to save a link to the message&lt;/span&gt;
&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;emacsclient&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;org-protocol://store-link?url=message://{message_id}&amp;amp;title={subject}&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We then configure neomutt (typically in &lt;code&gt;~/.muttrc&lt;/code&gt;) to call the
script with a shortcut.  I chose Esc-L (the same as Alt-L).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;macro index,pager \el &amp;quot;|~/scripts/mutt-save-org-link.py\n&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="emacs-configuration"&gt;Emacs configuration&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;org-protocol&lt;/code&gt;, we instruct emacsclient to intercept URLs with
the &lt;code&gt;org-protocol://&lt;/code&gt; scheme, as used by our &lt;code&gt;mutt-save-org-link.py&lt;/code&gt;
script.  We also tell org-mode how to handle special URLs of the form
&lt;code&gt;message://message-id+goes_here@mail.gmail.com&lt;/code&gt;.  Neomutt needs to know
which Maildir folder to open, so we ask &lt;code&gt;notmuch&lt;/code&gt; to tell us where the
message is located.&lt;/p&gt;
&lt;p&gt;In my &lt;code&gt;~/.emacs&lt;/code&gt; file I have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; Make sure org-protocol is loaded&lt;/span&gt;
&lt;span class="c1"&gt;; Now, org-protocol:// schemas are intercepted.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="nv"&gt;org-protocol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; Call this function, which spawns neomutt, whenever org-mode&lt;/span&gt;
&lt;span class="c1"&gt;; tries to open a link of the form message://message-id+goes_here@mail.gmail.com&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;stefanv/mutt-open-message&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message-id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;In neomutt, open the email with the the given Message-ID&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt;
      &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;message-id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^/*&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;message-id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mail-file&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
         &lt;span class="s"&gt;&amp;quot;\n$&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-command-to-string&lt;/span&gt;
                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;notmuch search --output=files id:%s&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;message-id&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mail-dir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/\\(cur\\|new\\|tmp\\)/$&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-name-directory&lt;/span&gt; &lt;span class="nv"&gt;mail-file&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;process-id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;neomutt-&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;message-id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message-id-escaped&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;regexp-quote&lt;/span&gt; &lt;span class="nv"&gt;message-id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mutt-keystrokes&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;l~i %s\n\n&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-quote-argument&lt;/span&gt; &lt;span class="nv"&gt;message-id-escaped&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mutt-command&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;neomutt&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-R&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mail-dir&lt;/span&gt;
                           &lt;span class="s"&gt;&amp;quot;-e&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;push &amp;#39;%s&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mutt-keystrokes&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Launching neomutt for message %s&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;message-id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;call-process&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;setsid&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
                   &lt;span class="s"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gnome-terminal&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--window&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;
                   &lt;span class="s"&gt;&amp;quot;neomutt&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-R&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mail-dir&lt;/span&gt;
                   &lt;span class="s"&gt;&amp;quot;-e&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;push &amp;#39;%s&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mutt-keystrokes&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="c1"&gt;; Whenever org-mode sees a link starting with `message://`, it&lt;/span&gt;
&lt;span class="c1"&gt;; calls our `mutt-open-message` function&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-add-link-type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;stefanv/mutt-open-message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are a few caveats: if you use &lt;code&gt;maildir-utils&lt;/code&gt;, the search
command is &lt;code&gt;mu find -f l i:%s&lt;/code&gt; instead of notmuch; and if you are not
on Linux, then &lt;code&gt;setsid&lt;/code&gt; (which we use to launch a detached background
process) is not going to work, and you will want to use a different
terminal emulator.&lt;/p&gt;
&lt;h2 id="other-systems"&gt;&lt;a name="#other-systems"&gt;&lt;/a&gt;Other Systems&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://vxlabs.com/"&gt;Charl Botha&lt;/a&gt; mentioned in the comments that, on
MacOS,
&lt;a href="https://orgmode.org/worg/org-contrib/org-mac-link.html"&gt;org-mac-link&lt;/a&gt;
lets you grab hyperlinks from a wide variety of apps.  Email messages,
specifically, are stored as &lt;code&gt;message://message-id&lt;/code&gt; URLs, which MacOS
knows how to open.  This post has been updated to use the same link schema.&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s it!  I&amp;rsquo;ve added the code
to
&lt;a href="https://github.com/stefanv/org-neomutt"&gt;https://github.com/stefanv/org-neomutt&lt;/a&gt;.
Please file issues and PRs there, or tell me about your use cases
in the comments below.&lt;/p&gt;</content><category term="org-mode"></category><category term="emacs"></category><category term="python"></category><category term="mutt"></category></entry><entry><title>WebSockets in Python (and some Redux)</title><link href="https://mentat.za.net/blog/2016/10/20/websockets-in-python/" rel="alternate"></link><published>2016-10-20T00:00:00-07:00</published><updated>2016-10-20T00:00:00-07:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2016-10-20:/blog/2016/10/20/websockets-in-python/</id><summary type="html">&lt;p&gt;Where we make pushing messages from a Python backend to
the browser easy.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of our work on &lt;a href="http://cesium.ml"&gt;Cesium&lt;/a&gt; and its
&lt;a href="https://github.com/cesium-ml/cesium_web"&gt;web frontend&lt;/a&gt;,
we&amp;rsquo;ve developed an easy
mechanism for Python web developers to
&lt;a href="http://cesium.ml/blog/2016/07/13/a-pattern-for-websockets-in-python/"&gt;push messages from their Python backends to the browser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are plenty of potential use cases, but consider, e.g., that you want
to verify a credit card number submitted by your user.  Traditionally, you&amp;rsquo;d
submit the number, and then poll the backend repeatedly from the browser.  Not
very elegant :/&lt;/p&gt;
&lt;p&gt;But with a WebSocket connection, you submit the credit card number and then
forget about it.  The &lt;em&gt;server&lt;/em&gt; will let you know when it&amp;rsquo;s done by pushing a
message to the frontend.&lt;/p&gt;
&lt;p&gt;Not only does this solve the annoying polling problem, but it opens up the
door to an entirely new universe of tools, such as Dan Abramov&amp;rsquo;s fantastic
&lt;a href="http://redux.js.org/"&gt;Redux&lt;/a&gt;.  Many of these Javascript libraries rely on the server
being able to notify the frontend when it needs to update itself.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s talk a bit about Redux.  The
&lt;a href="http://redux.js.org/docs/introduction/ThreePrinciples.html"&gt;principles&lt;/a&gt;
behind it are simple and elegant:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The entire state of your app is centrally
stored (in the equivalent of a Python dictionary);&lt;/li&gt;
&lt;li&gt;the state is immutable, and&lt;/li&gt;
&lt;li&gt;can only be updated through a central function call.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That centralization in turn enables other features such as logging, hot
reloading, time travel, etc.&lt;/p&gt;
&lt;p&gt;One of the great joys of Redux lies in moving away from the traditional
Model-View-Controller pattern.  With MVC, you are never quite sure how changes
propagate through the system.  With Redux, it is highly predictable.  Say
your app has a toggle button, and associated state &lt;code&gt;{toggle: true}&lt;/code&gt;.  An
action (e.g. &amp;ldquo;the red button was clicked&amp;rdquo;) is submitted to the central
dispatcher which then calculates the new state of the app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;new_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The implementation could look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;toggle_button&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current_state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The toggle button monitors the app state, and when &lt;code&gt;state['toggle']&lt;/code&gt; is
updated, re-renders itself.&lt;/p&gt;
&lt;p&gt;By vastly simplifying flow of information, by
&lt;a href="http://redux.js.org/docs/introduction/Motivation.html"&gt;disentangling mutation and asynchronicity&lt;/a&gt;, and by
getting rid of JQuery &amp;amp; hidden state stored somewhere in the bowels of the DOM,
Redux has, for me, returned the joy of web development.&lt;/p&gt;
&lt;p&gt;But, I&amp;rsquo;m getting distracted.  WebSockets&amp;mdash;in Python!&lt;/p&gt;
&lt;p&gt;Pushing messages from your Python web server to the user&amp;rsquo;s browser can now be
&lt;a href="https://github.com/cesium-ml/cesium_web/blob/e19e5543e193905da9555ce15fc71a52859c9fb0/cesium_app/handlers/base.py#L59"&gt;as simple as this&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Flow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;flow&lt;/span&gt;

&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_user@domain.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;message to the user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;to ship along&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please take a look at the more detailed technical description (with code!)
&lt;a href="http://cesium.ml/blog/2016/07/13/a-pattern-for-websockets-in-python/"&gt;on the Cesium blog&lt;/a&gt;.&lt;/p&gt;</content><category term="web"></category><category term="python"></category><category term="javascript"></category><category term="websocket"></category><category term="redux"></category><category term="react"></category></entry><entry><title>Compile TensorFlow from source with gcc6.1</title><link href="https://mentat.za.net/blog/2016/09/14/tensorflow-gcc6-1/" rel="alternate"></link><published>2016-09-14T00:00:00-07:00</published><updated>2016-09-14T00:00:00-07:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2016-09-14:/blog/2016/09/14/tensorflow-gcc6-1/</id><summary type="html">&lt;p&gt;Where we build TensorFlow from scratch.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Due to two bugs in gcc 6.1
&lt;a href="https://github.com/google/re2/issues/102"&gt;affecting the re2 library&lt;/a&gt;
(one of which has been fixed in 6.2)),
&lt;a href="https://www.tensorflow.org/"&gt;TensorFlow&lt;/a&gt; cannot be
&lt;a href="https://www.tensorflow.org/versions/r0.10/get_started/os_setup.html"&gt;compiled from source&lt;/a&gt;
one some systems (including my Debian Testing install).&lt;/p&gt;
&lt;p&gt;To work around the issue, modify &lt;code&gt;tensorflow/workspace.bzl&lt;/code&gt; and
change the re2 description to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;native.git_repository(
  name = &amp;quot;com_googlesource_code_re2&amp;quot;,
  remote = &amp;quot;https://github.com/stefanv/re2.git&amp;quot;,
  commit = &amp;quot;86503cb89d82b723ae0bce35e1e09524910cd319&amp;quot;,
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The re2 library is now downloaded from my fork, which applies a
&lt;a href="https://github.com/stefanv/re2/commit/86503cb89d82b723ae0bce35e1e09524910cd319"&gt;one line patch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Compile the TensorFlow Python package as usual with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bazel build -c opt //tensorflow/tools/pip_package:build_pip_package
bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After installing the pip wheel using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install /tmp/tensorflow_pkg/*.whl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you should have a working installation.  If importing fails with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ImportError: cannot import name &amp;#39;pywrap_tensorflow&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;switch out of the TensorFlow source directory and try again.&lt;/p&gt;</content><category term="tensorflow"></category><category term="python"></category></entry><entry><title>Python &amp; Matplotlib on OSX</title><link href="https://mentat.za.net/blog/2016/02/26/matplotlib-on-osx/" rel="alternate"></link><published>2016-02-26T00:00:00-08:00</published><updated>2016-02-26T00:00:00-08:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2016-02-26:/blog/2016/02/26/matplotlib-on-osx/</id><summary type="html">&lt;p&gt;Where we discuss two ways of installing Matplotlib on MacOS.&lt;/p&gt;</summary><content type="html">&lt;p&gt;One day, we will hopefully have a grand unified build and package management
system for Python where everything is free &amp;amp; open and Just Works (TM).  Until
then, you have two options:&lt;/p&gt;
&lt;h2 id="brew-python-pip"&gt;brew Python + pip&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;brew install python3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyvenv -v ~/envs/py3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source ~/envs/py3/bin/activate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install matplotlib&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pros/cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pip is the standard Python package management tool, and uses the official
   Python Package Index (PyPi) repository.&lt;/li&gt;
&lt;li&gt;Wheels on PyPi are built by authors themselves from open recipes.&lt;/li&gt;
&lt;li&gt;Binary wheels may not be available for all packages.&lt;/li&gt;
&lt;li&gt;Pip is not the best of package management tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conda"&gt;Conda&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Download and install miniconda&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conda create -n py3 python=3.5 matplotlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source activate py3&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pros/cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conda is a great package management tool.&lt;/li&gt;
&lt;li&gt;Conda environments are well tested; almost everything works out of the
    box.  This includes fast linear algebra using MKL.&lt;/li&gt;
&lt;li&gt;Some of the conda build recipes are closed and binary wheels may not be
    available for all packages&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Conda and pip do not always play well together.&lt;/li&gt;
&lt;li&gt;Conda packages are supported almost exclusively by a single company.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Some members of the community maintain &lt;a href="https://conda-forge.github.io"&gt;their own channels&lt;/a&gt;, but there are still some issues to
be aware of when &lt;a href="https://github.com/conda-forge/conda-forge.github.io/issues/22"&gt;mixing those channels and the official ones&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="python"></category></entry><entry><title>SciPy2013 Proceedings</title><link href="https://mentat.za.net/blog/2013/06/27/scipy2013-proceedings/" rel="alternate"></link><published>2013-06-27T17:20:00-07:00</published><updated>2013-06-27T17:20:00-07:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2013-06-27:/blog/2013/06/27/scipy2013-proceedings/</id><summary type="html">&lt;p&gt;Where I announce the SciPy 2013 proceedings, and talk about how we did it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The talks for the 12th (fantastic) Python in Science conference just concluded,
and I am happy to announce the
&lt;a href="https://dl.dropboxusercontent.com/u/380268/scipy_2013_proceedings_draft.pdf"&gt;conference proceedings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This may come as a surprize to some, since in the past we have been unable to
publish the proceedings in a timely manner.  So, what changed?&lt;/p&gt;
&lt;h2 id="review-process"&gt;Review process&lt;/h2&gt;
&lt;p&gt;For 2013 we followed a &lt;strong&gt;very light-weight review process, via comments on
GitHub pull-requests&lt;/strong&gt;.  This change has an important consequence: in contrast
to the traditional review process, where reviewers critically pull apart
papers, the process now changes into a constructive conversation&amp;ndash;the reviewer
becomes an ally to the author, helping them to get their paper signed off on.&lt;/p&gt;
&lt;p&gt;In addition, this is a very familiar process to most members of our community
who regularly collaborate to open source projects.  Most such projects nowadays
follow a similar methodology for discussing and integrating patches.&lt;/p&gt;
&lt;h2 id="tools"&gt;Tools&lt;/h2&gt;
&lt;p&gt;Since we can&amp;rsquo;t expect reviewers to check out and build the papers themselves, a
&lt;a href="http://stefan.pythonanywhere.com"&gt;paper build bot&lt;/a&gt; is provided to generate
PDFs from pull-requests, which contain papers in plain-text ReStructuredText
format (see the
&lt;a href="https://github.com/scipy/scipy_proceedings/tree/2013"&gt;proceedings repository&lt;/a&gt; for
examples, and all papers starting 2010).&lt;/p&gt;
&lt;p&gt;For authors, tools are provided to convert the ReStructuredText papers to
PDFs in IEEE Computer Society paper style.&lt;/p&gt;
&lt;h2 id="help-us-with-the-final-review"&gt;Help us with the final review&lt;/h2&gt;
&lt;p&gt;We welcome your feedback on the proceedings!  If you spot a mistake, please
submit a pull request on
&lt;a href="https://github.com/scipy/scipy_proceedings/tree/2013"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="thanks"&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Finally, a big shout-out to the amazing team of people who organized this
year&amp;rsquo;s conference, and to the wonderfully inclusive and talented Scientific
Python community, of which I am proud to be part of.&lt;/p&gt;</content><category term="scipy"></category><category term="python"></category></entry><entry><title>Replicable super-resolution paper</title><link href="https://mentat.za.net/blog/2012/10/15/replicable-super-resolution-paper/" rel="alternate"></link><published>2012-10-15T00:04:00-07:00</published><updated>2012-10-15T00:04:00-07:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2012-10-15:/blog/2012/10/15/replicable-super-resolution-paper/</id><summary type="html">&lt;p&gt;Where I summarize 5 years of my life in 10 pages.&lt;/p&gt;</summary><content type="html">&lt;p&gt;While I loved the topic of my PhD, I had to take a break after staring at that
problem for several years.  Thereafter, I was side-tracked by
&lt;a href="http://github.com/scipy"&gt;several&lt;/a&gt; &lt;a href="http://scikit-image.org"&gt;other&lt;/a&gt;
&lt;a href="http://dipy.org"&gt;projects&lt;/a&gt;, and never got around to publishing a paper on
&lt;a href="http://mentat.za.net/phd_dissertation.html"&gt;my dissertation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here, then, is a summary of the simple but effective super-resolution algorithm
described therein:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://arxiv.org/abs/1210.3404"&gt;http://arxiv.org/abs/1210.3404&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also submitted this work to NIPS: the reviewers liked the paper, but they
were not convinced of its novelty.  Having spent a lot of time studying the
existing literature, all I can say in response is that, while solving the
problem as a sparse linear system was well known at the time, phrasing Drizzle
as a linear operator and using it for super-resolution was not.&lt;/p&gt;
&lt;p&gt;But the proof of the pudding is in the eating! Have a look at the
&lt;a href="http://mentat.za.net/supreme"&gt;results and published code&lt;/a&gt; &amp;ndash; you can download it all (including a
sample data-set) and play with the different reconstruction parameters.  Quite
a bit of the code has since graduated into &lt;a href="http://scikit-image.org"&gt;scikit-image&lt;/a&gt;.&lt;/p&gt;</content><category term="super-resolution"></category><category term="image-processing"></category><category term="python"></category><category term="science"></category></entry><entry><title>scikits-image 0.7</title><link href="https://mentat.za.net/blog/2012/09/30/scikits-image-0-dot-7/" rel="alternate"></link><published>2012-09-30T16:18:00-07:00</published><updated>2012-09-30T16:18:00-07:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2012-09-30:/blog/2012/09/30/scikits-image-0-dot-7/</id><summary type="html">&lt;p&gt;We&amp;rsquo;re happy to announce the 7th version of scikits-image!&lt;/p&gt;
&lt;p&gt;Scikits-image is an image processing toolbox for SciPy that includes algorithms
for segmentation, geometric transformations, color space manipulation,
analysis, filtering, morphology, feature detection, and more.&lt;/p&gt;
&lt;p&gt;For more information, examples, and documentation, please visit &lt;a href="http://skimage.org"&gt;our website&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="new-features"&gt;New Features&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s been ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;We&amp;rsquo;re happy to announce the 7th version of scikits-image!&lt;/p&gt;
&lt;p&gt;Scikits-image is an image processing toolbox for SciPy that includes algorithms
for segmentation, geometric transformations, color space manipulation,
analysis, filtering, morphology, feature detection, and more.&lt;/p&gt;
&lt;p&gt;For more information, examples, and documentation, please visit &lt;a href="http://skimage.org"&gt;our website&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="new-features"&gt;New Features&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s been only 3 months since scikits-image 0.6 was released, but in that short
time, we&amp;rsquo;ve managed to add plenty of new features and enhancements, including&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geometric image transforms&lt;/li&gt;
&lt;li&gt;3 new image segmentation routines (Felsenzwalb, Quickshift, SLIC)&lt;/li&gt;
&lt;li&gt;Local binary patterns for texture characterization&lt;/li&gt;
&lt;li&gt;Morphological reconstruction&lt;/li&gt;
&lt;li&gt;Polygon approximation&lt;/li&gt;
&lt;li&gt;CIE Lab color space conversion&lt;/li&gt;
&lt;li&gt;Image pyramids&lt;/li&gt;
&lt;li&gt;Multispectral support in random walker segmentation&lt;/li&gt;
&lt;li&gt;Slicing, concatenation, and natural sorting of image collections&lt;/li&gt;
&lt;li&gt;Perimeter and coordinates measurements in regionprops&lt;/li&gt;
&lt;li&gt;An extensible image viewer based on Qt and Matplotlib, with plugins for edge
  detection, line-profiling, and viewing image collections&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Plus, this release adds a number of bug fixes, new examples, and performance
enhancements.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Comparison of pupular segmentation algorithms" src="https://mentat.za.net/blog/images/lena_superpixels.jpg" /&gt;&lt;/p&gt;
&lt;h2 id="contributors-to-this-release"&gt;Contributors to this release&lt;/h2&gt;
&lt;p&gt;This release was only possible due to the efforts of many contributors, both
new and old.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Andreas Mueller&lt;/li&gt;
&lt;li&gt;Andreas Wuerl&lt;/li&gt;
&lt;li&gt;Andy Wilson&lt;/li&gt;
&lt;li&gt;Brian Holt&lt;/li&gt;
&lt;li&gt;Christoph Gohlke&lt;/li&gt;
&lt;li&gt;Dharhas Pothina&lt;/li&gt;
&lt;li&gt;Emmanuelle Gouillart&lt;/li&gt;
&lt;li&gt;Guillaume Gay&lt;/li&gt;
&lt;li&gt;Josh Warner&lt;/li&gt;
&lt;li&gt;James Bergstra&lt;/li&gt;
&lt;li&gt;Johannes Sch√∂nberger&lt;/li&gt;
&lt;li&gt;Jonathan J. Helmus&lt;/li&gt;
&lt;li&gt;Juan Nunez-Iglesias&lt;/li&gt;
&lt;li&gt;Leon Tietz&lt;/li&gt;
&lt;li&gt;Marianne Corvellec&lt;/li&gt;
&lt;li&gt;Matt McCormick&lt;/li&gt;
&lt;li&gt;Neil Yager&lt;/li&gt;
&lt;li&gt;Nicolas Pinto&lt;/li&gt;
&lt;li&gt;Nicolas Poilvert&lt;/li&gt;
&lt;li&gt;Pavel Campr&lt;/li&gt;
&lt;li&gt;Petter Strandmark&lt;/li&gt;
&lt;li&gt;St√©fan van der Walt&lt;/li&gt;
&lt;li&gt;Tim Sheerman-Chase&lt;/li&gt;
&lt;li&gt;Tomas Kazmar&lt;/li&gt;
&lt;li&gt;Tony S Yu&lt;/li&gt;
&lt;li&gt;Wei Li&lt;/li&gt;
&lt;/ul&gt;</content><category term="image processing"></category><category term="scipy"></category><category term="python"></category><category term="science"></category></entry><entry><title>Emacs package management</title><link href="https://mentat.za.net/blog/2012/09/25/emacs-package-management/" rel="alternate"></link><published>2012-09-25T17:14:00-07:00</published><updated>2012-09-25T17:14:00-07:00</updated><author><name>Stefan van der Walt</name></author><id>tag:mentat.za.net,2012-09-25:/blog/2012/09/25/emacs-package-management/</id><summary type="html">&lt;p&gt;I recently tried to install MuMaMo as one of the dependencies for Takafumi
Arakaki&amp;rsquo;s &lt;a href="https://github.com/tkf/emacs-ipython-notebook"&gt;Emacs-based IPython notebook&lt;/a&gt;.  The instructions on the MuMaMo
webpage were as clear as mud and aimed primarily at Windows users.  Enters
&lt;a href="https://github.com/dimitri/el-get"&gt;apt-get for Emacs&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;My Emacs setup is shared across multiple machines: a synchronized &lt;code&gt;elisp ‚Ä¶&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently tried to install MuMaMo as one of the dependencies for Takafumi
Arakaki&amp;rsquo;s &lt;a href="https://github.com/tkf/emacs-ipython-notebook"&gt;Emacs-based IPython notebook&lt;/a&gt;.  The instructions on the MuMaMo
webpage were as clear as mud and aimed primarily at Windows users.  Enters
&lt;a href="https://github.com/dimitri/el-get"&gt;apt-get for Emacs&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;My Emacs setup is shared across multiple machines: a synchronized &lt;code&gt;elisp&lt;/code&gt;
folder, containing &lt;code&gt;*.el&lt;/code&gt; files, along with my &lt;code&gt;.emacs&lt;/code&gt; configuration.
&lt;code&gt;el-get&lt;/code&gt; allows you to share your package installation folder in a similar
fashion.  Here are some relevant configuration snippets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; Everything gets installed into ~/elisp, a folder&lt;/span&gt;
&lt;span class="c1"&gt;; I sync across all my machines&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;el-get-dir&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/elisp/el-get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;el-get-install-dir&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/elisp/el-get/el-get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;load-path&lt;/span&gt; &lt;span class="nv"&gt;el-get-install-dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; If el-get is missing, install it automatically&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;el-get&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url-retrieve&lt;/span&gt;
   &lt;span class="s"&gt;&amp;quot;https://raw.github.com/dimitri/el-get/master/el-get-install.el&amp;quot;&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;eval-print-last-sexp&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="c1"&gt;; Install these packages, and call the specified configuration snippets&lt;/span&gt;
&lt;span class="c1"&gt;; after each load&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;el-get-sources&lt;/span&gt;
      &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;

        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;ethan-wspace&lt;/span&gt;
         &lt;span class="ss"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;progn&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-ethan-wspace-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;set-face-background&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;ethan-wspace-face&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gray95&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;column-marker&lt;/span&gt;
         &lt;span class="ss"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;font-lock-mode-hook&lt;/span&gt;
                          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;column-marker-1&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="c1"&gt;; Also install these packages, no configuration required&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;my-packages&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;
       &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;el-get&lt;/span&gt; &lt;span class="nv"&gt;maxframe&lt;/span&gt; &lt;span class="nv"&gt;markdown-mode&lt;/span&gt; &lt;span class="nv"&gt;ein&lt;/span&gt; &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;mapcar&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;el-get-source-name&lt;/span&gt; &lt;span class="nv"&gt;el-get-sources&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; Check packages and install any that are missing&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;el-get&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;sync&lt;/span&gt; &lt;span class="nv"&gt;my-packages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are two ways to specify packages to be installed: either include them in
the &lt;code&gt;my-packages&lt;/code&gt; list, or add them to &lt;code&gt;el-get-sources&lt;/code&gt;, which in addition
allows further customization upon successful loading of the package.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://software-carpentry.org/2012/09/whats-in-your-stack/"&gt;What&amp;rsquo;s in your stack?&lt;/a&gt; Here&amp;rsquo;s my list of Emacs packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Org Mode, Ethan&amp;#39;s wspace, Tab Bar, Column Marker, Max Frame, EIN, Python,
JS2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do you know of any other useful packages?  Let me know!&lt;/p&gt;
&lt;!-- References --&gt;</content><category term="emacs"></category><category term="python"></category><category term="scipy"></category></entry></feed>